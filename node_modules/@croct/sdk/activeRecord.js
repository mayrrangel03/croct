"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActiveRecord = void 0;
var tslib_1 = require("tslib");
var schema_1 = require("./schema");
var operationSchema = {
    add: schema_1.addOperation,
    set: schema_1.setOperation,
    merge: schema_1.mergeOperation,
    combine: schema_1.combineOperation,
    increment: schema_1.incrementOperation,
    decrement: schema_1.decrementOperation,
    clear: schema_1.clearOperation,
    unset: schema_1.unsetOperation,
    remove: schema_1.removeOperation,
};
var ActiveRecord = /** @class */ (function () {
    function ActiveRecord() {
        this.operations = [];
    }
    ActiveRecord.prototype.set = function (propertyOrValue, value) {
        if (typeof propertyOrValue === 'string') {
            return this.pushOperation({
                type: 'set',
                path: propertyOrValue,
                value: value,
            });
        }
        return this.pushOperation({
            type: 'set',
            path: '.',
            value: propertyOrValue,
        });
    };
    ActiveRecord.prototype.add = function (property, value) {
        return this.pushOperation({
            type: 'add',
            path: property,
            value: value,
        });
    };
    ActiveRecord.prototype.combine = function (property, value) {
        return this.pushOperation({
            type: 'combine',
            path: property,
            value: value,
        });
    };
    ActiveRecord.prototype.merge = function (propertyOrValue, value) {
        if (typeof propertyOrValue === 'string') {
            return this.pushOperation({
                type: 'merge',
                path: propertyOrValue,
                value: value,
            });
        }
        return this.pushOperation({
            type: 'merge',
            path: '.',
            value: propertyOrValue,
        });
    };
    ActiveRecord.prototype.increment = function (property, amount) {
        if (amount === void 0) { amount = 1; }
        return this.pushOperation({
            type: 'increment',
            path: property,
            value: amount,
        });
    };
    ActiveRecord.prototype.decrement = function (property, amount) {
        if (amount === void 0) { amount = 1; }
        return this.pushOperation({
            type: 'decrement',
            path: property,
            value: amount,
        });
    };
    ActiveRecord.prototype.clear = function (property) {
        return this.pushOperation({
            type: 'clear',
            path: property,
        });
    };
    ActiveRecord.prototype.unset = function (property) {
        return this.pushOperation({
            type: 'unset',
            path: property,
        });
    };
    ActiveRecord.prototype.remove = function (property, value) {
        return this.pushOperation({
            type: 'remove',
            path: property,
            value: value,
        });
    };
    ActiveRecord.prototype.pushOperation = function (operation) {
        var type = operation.type, data = tslib_1.__rest(operation, ["type"]);
        operationSchema[type].validate(data);
        this.operations.push(operation);
        return this;
    };
    ActiveRecord.prototype.reset = function () {
        this.operations.splice(0);
        return this;
    };
    ActiveRecord.prototype.isDirty = function () {
        return this.operations.length > 0;
    };
    ActiveRecord.prototype.buildPatch = function () {
        return { operations: this.operations.slice() };
    };
    return ActiveRecord;
}());
exports.ActiveRecord = ActiveRecord;

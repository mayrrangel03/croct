"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberType = void 0;
var tslib_1 = require("tslib");
var schema_1 = require("./schema");
var violation_1 = require("./violation");
var NumberType = /** @class */ (function () {
    function NumberType(definition) {
        if (definition === void 0) { definition = {}; }
        var _a, _b, _c;
        this.definition = tslib_1.__assign(tslib_1.__assign({}, definition), { integer: (_a = definition.integer) !== null && _a !== void 0 ? _a : false, minimum: (_b = definition.minimum) !== null && _b !== void 0 ? _b : Number.NEGATIVE_INFINITY, maximum: (_c = definition.maximum) !== null && _c !== void 0 ? _c : Number.POSITIVE_INFINITY });
    }
    NumberType.prototype.getTypes = function () {
        return [this.definition.integer ? 'integer' : 'number'];
    };
    NumberType.prototype.isValidType = function (value) {
        return typeof value === 'number' && (!this.definition.integer || Number.isInteger(value));
    };
    NumberType.prototype.validate = function (value, path) {
        if (path === void 0) { path = []; }
        if (!this.isValidType(value)) {
            var type = this.getTypes()[0];
            throw new schema_1.Violation("Expected value of type ".concat(type, " at path '").concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: type });
        }
        if (value < this.definition.minimum) {
            throw new schema_1.Violation("Expected a value greater than or equal to ".concat(this.definition.minimum, " ")
                + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat(value, "."), path, { limit: this.definition.minimum });
        }
        if (value > this.definition.maximum) {
            throw new schema_1.Violation("Expected a value less than or equal to ".concat(this.definition.maximum, " ")
                + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat(value, "."), path, { limit: this.definition.maximum });
        }
    };
    return NumberType;
}());
exports.NumberType = NumberType;

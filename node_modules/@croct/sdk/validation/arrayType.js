"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayType = void 0;
var tslib_1 = require("tslib");
var schema_1 = require("./schema");
var violation_1 = require("./violation");
var ArrayType = /** @class */ (function () {
    function ArrayType(definition) {
        if (definition === void 0) { definition = {}; }
        var _a, _b;
        this.definition = tslib_1.__assign(tslib_1.__assign({}, definition), { minItems: (_a = definition.minItems) !== null && _a !== void 0 ? _a : -1, maxItems: (_b = definition.maxItems) !== null && _b !== void 0 ? _b : -1 });
    }
    ArrayType.prototype.getTypes = function () {
        return ['array'];
    };
    ArrayType.prototype.isValidType = function (value) {
        return Array.isArray(value);
    };
    ArrayType.prototype.validate = function (value, path) {
        if (path === void 0) { path = []; }
        if (!this.isValidType(value)) {
            throw new schema_1.Violation("Expected value of type array at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: 'string' });
        }
        var _a = this.definition, minItems = _a.minItems, maxItems = _a.maxItems;
        var length = value.length;
        if (minItems >= 0 && minItems > length) {
            throw new schema_1.Violation("Expected ".concat(minItems === maxItems ? 'exactly' : 'at least', " ")
                + "".concat(minItems, " ").concat(minItems === 1 ? 'item' : 'items', " ")
                + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat(length, "."), path, { limit: minItems });
        }
        if (maxItems >= 0 && maxItems < length) {
            throw new schema_1.Violation("Expected ".concat(minItems === maxItems ? 'exactly' : 'at most', " ")
                + "".concat(maxItems, " ").concat(maxItems === 1 ? 'item' : 'items', " ")
                + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat(length, "."), path, { limit: maxItems });
        }
        if (this.definition.items === undefined) {
            return;
        }
        for (var index = 0; index < length; index++) {
            this.definition.items.validate(value[index], path.concat([index.toString()]));
        }
    };
    return ArrayType;
}());
exports.ArrayType = ArrayType;

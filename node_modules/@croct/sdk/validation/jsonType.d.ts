import { Schema, TypeSchema } from './schema';
declare type JsonObjectDefinition = {
    properties?: Schema;
    propertyNames?: Schema;
};
export declare class JsonObjectType implements TypeSchema {
    private readonly definition;
    constructor(definition?: JsonObjectDefinition);
    getTypes(): string[];
    isValidType(value: unknown): boolean;
    validate(value: unknown, path?: string[]): void;
}
declare type JsonArrayDefinition = {
    items?: Schema;
};
export declare class JsonArrayType implements TypeSchema {
    private readonly definition;
    constructor(definition?: JsonArrayDefinition);
    getTypes(): string[];
    isValidType(value: unknown): boolean;
    validate(value: unknown, path?: string[]): void;
}
export declare class JsonPrimitiveType implements TypeSchema {
    getTypes(): string[];
    isValidType(value: unknown): boolean;
    validate(value: unknown, path?: string[]): void;
}
export declare class JsonType implements TypeSchema {
    getTypes(): string[];
    isValidType(value: unknown): boolean;
    validate(value: unknown, path?: string[]): void;
}
export {};

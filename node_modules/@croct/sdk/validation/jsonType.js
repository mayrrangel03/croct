"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonType = exports.JsonPrimitiveType = exports.JsonArrayType = exports.JsonObjectType = void 0;
var tslib_1 = require("tslib");
var schema_1 = require("./schema");
var violation_1 = require("./violation");
function isJsonPrimitive(value) {
    return value === null || typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number';
}
function isJsonArray(value) {
    return Array.isArray(value) && value.every(isJsonValue);
}
function isJsonValue(value) {
    return isJsonPrimitive(value) || isJsonArray(value) || isJsonObject(value);
}
function isJsonObject(value) {
    return isPlainObject(value) && Object.values(value).every(isJsonValue);
}
// eslint-disable-next-line @typescript-eslint/ban-types
function isPlainObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
var JsonObjectType = /** @class */ (function () {
    function JsonObjectType(definition) {
        if (definition === void 0) { definition = {}; }
        this.definition = definition;
    }
    JsonObjectType.prototype.getTypes = function () {
        return ['object'];
    };
    JsonObjectType.prototype.isValidType = function (value) {
        return isPlainObject(value);
    };
    JsonObjectType.prototype.validate = function (value, path) {
        var e_1, _a;
        if (path === void 0) { path = []; }
        if (!isJsonObject(value)) {
            throw new schema_1.Violation("Expected a JSON object at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: 'object' });
        }
        if (this.definition.properties === undefined && this.definition.propertyNames === undefined) {
            return;
        }
        try {
            for (var _b = tslib_1.__values(Object.entries(value)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib_1.__read(_c.value, 2), entryName = _d[0], entryValue = _d[1];
                var propertyPath = path.concat([entryName]);
                if (this.definition.propertyNames !== undefined) {
                    this.definition.propertyNames.validate(entryName, propertyPath);
                }
                if (this.definition.properties !== undefined) {
                    this.definition.properties.validate(entryValue, path.concat([entryName]));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    return JsonObjectType;
}());
exports.JsonObjectType = JsonObjectType;
var JsonArrayType = /** @class */ (function () {
    function JsonArrayType(definition) {
        if (definition === void 0) { definition = {}; }
        this.definition = definition;
    }
    JsonArrayType.prototype.getTypes = function () {
        return ['array'];
    };
    JsonArrayType.prototype.isValidType = function (value) {
        return Array.isArray(value);
    };
    JsonArrayType.prototype.validate = function (value, path) {
        if (path === void 0) { path = []; }
        if (!isJsonArray(value)) {
            throw new schema_1.Violation("Expected a JSON array at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: 'array' });
        }
        if (this.definition.items === undefined) {
            return;
        }
        for (var index = 0; index < value.length; index++) {
            this.definition.items.validate(value[index], path.concat([index.toString()]));
        }
    };
    return JsonArrayType;
}());
exports.JsonArrayType = JsonArrayType;
var JsonPrimitiveType = /** @class */ (function () {
    function JsonPrimitiveType() {
    }
    JsonPrimitiveType.prototype.getTypes = function () {
        return ['null', 'number', 'string', 'boolean'];
    };
    JsonPrimitiveType.prototype.isValidType = function (value) {
        return isJsonPrimitive(value);
    };
    JsonPrimitiveType.prototype.validate = function (value, path) {
        if (path === void 0) { path = []; }
        if (!this.isValidType(value)) {
            throw new schema_1.Violation("Expected a JSON primitive at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: this.getTypes().join('|') });
        }
    };
    return JsonPrimitiveType;
}());
exports.JsonPrimitiveType = JsonPrimitiveType;
var JsonType = /** @class */ (function () {
    function JsonType() {
    }
    JsonType.prototype.getTypes = function () {
        return ['null', 'number', 'string', 'boolean', 'array', 'object'];
    };
    JsonType.prototype.isValidType = function (value) {
        return isJsonPrimitive(value) || Array.isArray(value) || isPlainObject(value);
    };
    JsonType.prototype.validate = function (value, path) {
        if (path === void 0) { path = []; }
        if (!isJsonValue(value)) {
            throw new schema_1.Violation("Expected a JSON value at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: this.getTypes().join('|') });
        }
    };
    return JsonType;
}());
exports.JsonType = JsonType;

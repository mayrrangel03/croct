"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnionType = void 0;
var tslib_1 = require("tslib");
var schema_1 = require("./schema");
var violation_1 = require("./violation");
var UnionType = /** @class */ (function () {
    function UnionType(first, second) {
        var others = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            others[_i - 2] = arguments[_i];
        }
        this.schemas = tslib_1.__spreadArray([first, second], tslib_1.__read(others), false);
    }
    UnionType.prototype.getTypes = function () {
        var e_1, _a, e_2, _b;
        var types = [];
        try {
            for (var _c = tslib_1.__values(this.schemas), _d = _c.next(); !_d.done; _d = _c.next()) {
                var schema = _d.value;
                try {
                    for (var _e = (e_2 = void 0, tslib_1.__values(schema.getTypes())), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var type = _f.value;
                        if (types.indexOf(type) < 0) {
                            types.push(type);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return types;
    };
    UnionType.prototype.isValidType = function (value) {
        var e_3, _a;
        try {
            for (var _b = tslib_1.__values(this.schemas), _c = _b.next(); !_c.done; _c = _b.next()) {
                var schema = _c.value;
                if (schema.isValidType(value)) {
                    return true;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return false;
    };
    UnionType.prototype.validate = function (value, path) {
        var e_4, _a;
        if (path === void 0) { path = []; }
        try {
            for (var _b = tslib_1.__values(this.schemas), _c = _b.next(); !_c.done; _c = _b.next()) {
                var schema = _c.value;
                if (schema.isValidType(value)) {
                    schema.validate(value, path);
                    return;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        var types = this.getTypes();
        throw new schema_1.Violation("Expected value of type ".concat(types.slice(0, -1).join(', '), " or ").concat(types[types.length - 1], " ")
            + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: types.join('|') });
    };
    return UnionType;
}());
exports.UnionType = UnionType;

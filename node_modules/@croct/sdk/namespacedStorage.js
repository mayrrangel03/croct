"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamespacedStorage = void 0;
var tslib_1 = require("tslib");
var NamespacedStorage = /** @class */ (function () {
    function NamespacedStorage(storage, namespace) {
        if (namespace === '') {
            throw new Error('The namespace cannot be empty.');
        }
        this.storage = storage;
        this.namespace = namespace;
    }
    Object.defineProperty(NamespacedStorage.prototype, "length", {
        get: function () {
            return this.getKeys().length;
        },
        enumerable: false,
        configurable: true
    });
    NamespacedStorage.prototype.clear = function () {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(this.getKeys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                this.storage.removeItem(key);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    NamespacedStorage.prototype.getItem = function (key) {
        return this.storage.getItem(this.getPrefixedKey(key));
    };
    NamespacedStorage.prototype.key = function (index) {
        var keys = this.getKeys();
        if (index >= keys.length) {
            return null;
        }
        return keys[index].substring(this.namespace.length + 1);
    };
    NamespacedStorage.prototype.removeItem = function (key) {
        this.storage.removeItem(this.getPrefixedKey(key));
    };
    NamespacedStorage.prototype.setItem = function (key, value) {
        this.storage.setItem(this.getPrefixedKey(key), value);
    };
    NamespacedStorage.prototype.getKeys = function () {
        var keys = [];
        var prefix = this.getPrefix();
        for (var index = 0; index < this.storage.length; index++) {
            var key = this.storage.key(index);
            if (key !== null && key.indexOf(prefix) === 0) {
                keys.push(key);
            }
        }
        return keys;
    };
    NamespacedStorage.prototype.getPrefixedKey = function (key) {
        return this.getPrefix() + key;
    };
    NamespacedStorage.prototype.getPrefix = function () {
        return "".concat(this.namespace, ".");
    };
    return NamespacedStorage;
}());
exports.NamespacedStorage = NamespacedStorage;

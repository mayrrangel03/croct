"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = void 0;
var tslib_1 = require("tslib");
var logging_1 = require("./logging");
var context_1 = require("./context");
var namespacedStorage_1 = require("./namespacedStorage");
var retry_1 = require("./retry");
var queue_1 = require("./queue");
var tracker_1 = require("./tracker");
var evaluator_1 = require("./evaluator");
var transformer_1 = require("./transformer");
var cid_1 = require("./cid");
var eventManager_1 = require("./eventManager");
var cache_1 = require("./cache");
var guaranteedChannel_1 = require("./channel/guaranteedChannel");
var channel_1 = require("./channel");
var Container = /** @class */ (function () {
    function Container(configuration) {
        this.eventManager = new eventManager_1.SynchronousEventManager();
        this.configuration = configuration;
    }
    Container.prototype.getConfiguration = function () {
        return this.configuration;
    };
    Container.prototype.getEvaluator = function () {
        if (this.evaluator === undefined) {
            this.evaluator = this.createEvaluator();
        }
        return this.evaluator;
    };
    Container.prototype.createEvaluator = function () {
        return new evaluator_1.Evaluator({
            appId: this.configuration.appId,
            endpointUrl: this.configuration.evaluationEndpointUrl,
            tokenProvider: this.getTokenProvider(),
            cidAssigner: this.getCidAssigner(),
        });
    };
    Container.prototype.getTracker = function () {
        if (this.tracker === undefined) {
            this.tracker = this.createTracker();
        }
        return this.tracker;
    };
    Container.prototype.createTracker = function () {
        var context = this.getContext();
        var tracker = new tracker_1.Tracker({
            tab: context.getTab(),
            tokenProvider: this.getTokenProvider(),
            inactivityRetryPolicy: new retry_1.ArbitraryPolicy([30000, 30000, 120000, 120000, 300000, 300000, 900000]),
            logger: this.getLogger('Tracker'),
            channel: this.getBeaconChannel(),
            eventMetadata: this.configuration.eventMetadata || {},
        });
        var queue = this.getBeaconQueue();
        queue.addCallback('halfEmpty', tracker.unsuspend);
        queue.addCallback('full', tracker.suspend);
        return tracker;
    };
    Container.prototype.getTokenProvider = function () {
        if (this.tokenProvider === undefined) {
            var context = this.getContext();
            this.tokenProvider = { getToken: context.getToken.bind(context) };
        }
        return this.tokenProvider;
    };
    Container.prototype.getContext = function () {
        if (this.context === undefined) {
            this.context = this.createContext();
        }
        return this.context;
    };
    Container.prototype.createContext = function () {
        var tokenKey = this.resolveStorageNamespace('token');
        var tabKey = this.resolveStorageNamespace('tab');
        var browserStorage = this.getLocalStorage();
        var browserCache = new cache_1.LocalStorageCache(browserStorage, tokenKey);
        var tabStorage = this.getSessionStorage();
        this.removeTokenSyncListener = cache_1.LocalStorageCache.autoSync(browserCache);
        return context_1.Context.load({
            tokenScope: this.configuration.tokenScope,
            eventDispatcher: this.getEventManager(),
            urlSanitizer: this.configuration.urlSanitizer,
            cache: {
                tabId: new cache_1.LocalStorageCache(tabStorage, tabKey),
                tabToken: new cache_1.LocalStorageCache(tabStorage, tokenKey),
                browserToken: browserCache,
            },
        });
    };
    Container.prototype.getBeaconChannel = function () {
        if (this.beaconChannel === undefined) {
            this.beaconChannel = this.createBeaconChannel();
        }
        return this.beaconChannel;
    };
    Container.prototype.createBeaconChannel = function () {
        if (this.configuration.test) {
            return new channel_1.SandboxChannel();
        }
        var channelLogger = this.getLogger('BeaconChannel');
        var _a = this.configuration, appId = _a.appId, trackerEndpointUrl = _a.trackerEndpointUrl;
        var queuedChannel = new channel_1.QueuedChannel(new channel_1.RetryChannel({
            channel: new channel_1.GuaranteedChannel({
                channel: new channel_1.BeaconSocketChannel({
                    trackerEndpointUrl: "".concat(trackerEndpointUrl, "/").concat(appId),
                    tokenParameter: 'token',
                    loggerFactory: this.getLogger.bind(this),
                    logger: channelLogger,
                    channelFactory: function (url, logger) { return new channel_1.SocketChannel({ url: url, logger: logger }); },
                    cidAssigner: this.getCidAssigner(),
                    cidParameter: 'clientId',
                }),
                stamper: new guaranteedChannel_1.TimeStamper(),
                ackTimeout: 10000,
                logger: channelLogger,
            }),
            retryPolicy: new retry_1.BackoffPolicy({
                minRetryDelay: 1000,
                maxRetryDelay: 60 * 1000,
                backoffFactor: 1.5,
                backoffJitter: 1, // add randomness
            }),
            logger: channelLogger,
        }), this.getBeaconQueue(), channelLogger);
        queuedChannel.flush().catch(function () {
            // Suppress errors as they are already reported by the channel
        });
        return new channel_1.EncodedChannel(queuedChannel, transformer_1.encodeJson);
    };
    Container.prototype.getCidAssigner = function () {
        if (this.cidAssigner === undefined) {
            this.cidAssigner = this.createCidAssigner();
        }
        return this.cidAssigner;
    };
    Container.prototype.createCidAssigner = function () {
        if (this.configuration.cid !== undefined) {
            return new cid_1.FixedAssigner(this.configuration.cid);
        }
        if (this.configuration.test) {
            return new cid_1.FixedAssigner('00000000-0000-0000-0000-000000000000');
        }
        var logger = this.getLogger('CidAssigner');
        return new cid_1.CachedAssigner(new cid_1.RemoteAssigner(this.configuration.bootstrapEndpointUrl, logger), new cache_1.LocalStorageCache(this.getLocalStorage(), 'croct.cid'), logger);
    };
    Container.prototype.getBeaconQueue = function () {
        if (this.beaconQueue === undefined) {
            this.beaconQueue = this.createBeaconQueue();
        }
        return this.beaconQueue;
    };
    Container.prototype.createBeaconQueue = function () {
        var context = this.getContext();
        var tab = context.getTab();
        return new queue_1.MonitoredQueue(new queue_1.CapacityRestrictedQueue(new queue_1.PersistentQueue(this.getGlobalTabStorage('queue'), tab.id), this.configuration.beaconQueueSize), this.getLogger('BeaconQueue'));
    };
    Container.prototype.getLogger = function () {
        var namespace = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            namespace[_i] = arguments[_i];
        }
        var prefix = "Croct".concat(namespace.length === 0 ? '' : ":".concat(namespace.join(':')));
        if (this.configuration.logger !== undefined) {
            return new logging_1.NamespacedLogger(this.configuration.logger, prefix);
        }
        if (this.configuration.debug) {
            return new logging_1.ConsoleLogger(prefix);
        }
        return new logging_1.NullLogger();
    };
    Container.prototype.getTabStorage = function (namespace) {
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            subnamespace[_i - 1] = arguments[_i];
        }
        return this.getGlobalTabStorage.apply(this, tslib_1.__spreadArray(['external', namespace], tslib_1.__read(subnamespace), false));
    };
    Container.prototype.getBrowserStorage = function (namespace) {
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            subnamespace[_i - 1] = arguments[_i];
        }
        return this.getGlobalBrowserStorage.apply(this, tslib_1.__spreadArray(['external', namespace], tslib_1.__read(subnamespace), false));
    };
    Container.prototype.getGlobalTabStorage = function (namespace) {
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            subnamespace[_i - 1] = arguments[_i];
        }
        return new namespacedStorage_1.NamespacedStorage(this.getSessionStorage(), this.resolveStorageNamespace.apply(this, tslib_1.__spreadArray([namespace], tslib_1.__read(subnamespace), false)));
    };
    Container.prototype.getGlobalBrowserStorage = function (namespace) {
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            subnamespace[_i - 1] = arguments[_i];
        }
        return new namespacedStorage_1.NamespacedStorage(this.getLocalStorage(), this.resolveStorageNamespace.apply(this, tslib_1.__spreadArray([namespace], tslib_1.__read(subnamespace), false)));
    };
    Container.prototype.resolveStorageNamespace = function (namespace) {
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            subnamespace[_i - 1] = arguments[_i];
        }
        return "croct[".concat(this.configuration.appId.toLowerCase(), "].").concat([namespace].concat(subnamespace).join('.'));
    };
    Container.prototype.getLocalStorage = function () {
        return localStorage;
    };
    Container.prototype.getSessionStorage = function () {
        return sessionStorage;
    };
    Container.prototype.getEventManager = function () {
        return this.eventManager;
    };
    Container.prototype.dispose = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var logger;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger = this.getLogger();
                        if (!this.beaconChannel) return [3 /*break*/, 2];
                        logger.debug('Closing beacon channel...');
                        return [4 /*yield*/, this.beaconChannel.close()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (this.removeTokenSyncListener) {
                            logger.debug('Removing token sync listener...');
                            this.removeTokenSyncListener();
                        }
                        if (!this.tracker) return [3 /*break*/, 4];
                        if (this.beaconQueue) {
                            logger.debug('Removing queue listeners...');
                            this.beaconQueue.removeCallback('halfEmpty', this.tracker.unsuspend);
                            this.beaconQueue.removeCallback('full', this.tracker.suspend);
                        }
                        logger.debug('Suspending tracker...');
                        this.tracker.suspend();
                        return [4 /*yield*/, this.tracker.flushed];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        delete this.context;
                        delete this.tokenProvider;
                        delete this.cidAssigner;
                        delete this.tracker;
                        delete this.evaluator;
                        delete this.beaconChannel;
                        delete this.beaconQueue;
                        delete this.removeTokenSyncListener;
                        logger.debug('Container resources released.');
                        return [2 /*return*/];
                }
            });
        });
    };
    return Container;
}());
exports.Container = Container;

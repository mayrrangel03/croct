import { Logger } from '../logging';
import { ChannelListener, DuplexChannel } from './channel';
declare type Input = string | ArrayBufferLike | Blob | ArrayBufferView;
declare type Output = string | ArrayBuffer | Blob;
declare type Options = {
    closeTimeout: number;
    connectionTimeout: number;
    protocols: string | string[];
    binaryType?: BinaryType;
};
export declare type Configuration = Partial<Options> & {
    url: string;
    logger?: Logger;
};
export declare class SocketChannel<I extends Input, O extends Output> implements DuplexChannel<I, O> {
    private readonly url;
    private readonly logger;
    private readonly options;
    private readonly listeners;
    private connection?;
    private closed;
    constructor({ url, logger, ...options }: Configuration);
    get connected(): Promise<boolean>;
    publish(message: O): Promise<void>;
    subscribe(listener: ChannelListener<I>): void;
    unsubscribe(listener: ChannelListener<I>): void;
    private notify;
    private connect;
    close(): Promise<void>;
}
export {};

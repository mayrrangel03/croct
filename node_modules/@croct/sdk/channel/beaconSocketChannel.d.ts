import { ChannelListener, DuplexChannel } from './channel';
import { Envelope } from './guaranteedChannel';
import { Logger, LoggerFactory } from '../logging';
import { CidAssigner } from '../cid';
export interface DuplexChannelFactory {
    (url: string, logger: Logger): DuplexChannel<string, string>;
}
declare type Configuration = {
    logger?: Logger;
    loggerFactory?: LoggerFactory;
    tokenParameter: string;
    trackerEndpointUrl: string;
    channelFactory: DuplexChannelFactory;
    cidAssigner: CidAssigner;
    cidParameter: string;
};
export declare class BeaconSocketChannel implements DuplexChannel<string, Envelope<string, string>> {
    private readonly socketFactory;
    private readonly logger;
    private readonly loggerFactory;
    private readonly cidAssigner;
    private readonly cidParameter;
    private readonly tokenParameter;
    private readonly trackerEndpointUrl;
    private readonly listeners;
    private socketChannel?;
    private token?;
    private connectionIndex;
    constructor(configuration: Configuration);
    publish({ id: receiptId, message }: Envelope<string, string>): Promise<void>;
    private createSocketChannel;
    subscribe(listener: ChannelListener<string>): void;
    unsubscribe(listener: ChannelListener<string>): void;
    private notify;
    close(): Promise<void>;
}
export {};

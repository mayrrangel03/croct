import { Logger } from '../logging';
import { DuplexChannel, OutputChannel } from './channel';
export declare type MessageStamper<M, S> = {
    generate(message: M): S;
};
export declare class TimeStamper implements MessageStamper<any, string> {
    generate(): string;
}
export declare type Envelope<M, S> = {
    id: S;
    message: M;
};
declare type Options = {
    ackTimeout: number;
};
declare type Configuration<M, S> = Partial<Options> & {
    channel: DuplexChannel<S, Envelope<M, S>>;
    stamper: MessageStamper<M, S>;
    logger?: Logger;
};
export declare class GuaranteedChannel<M, S> implements OutputChannel<M> {
    private readonly channel;
    private readonly stamper;
    private readonly logger;
    private readonly options;
    private closed;
    constructor({ channel, logger, stamper, ...options }: Configuration<M, S>);
    publish(message: M): Promise<void>;
    close(): Promise<void>;
}
export {};

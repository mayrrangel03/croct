"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetryChannel = void 0;
var tslib_1 = require("tslib");
var logging_1 = require("../logging");
var RetryChannel = /** @class */ (function () {
    function RetryChannel(_a) {
        var channel = _a.channel, retryPolicy = _a.retryPolicy, logger = _a.logger;
        this.closed = false;
        this.channel = channel;
        this.retryPolicy = retryPolicy;
        this.logger = logger !== null && logger !== void 0 ? logger : new logging_1.NullLogger();
    }
    RetryChannel.prototype.publish = function (message) {
        var _this = this;
        if (this.closed) {
            return Promise.reject(new Error('The channel is closed.'));
        }
        return this.channel.publish(message).catch(function (error) { return _this.retry(message, error); });
    };
    RetryChannel.prototype.retry = function (message, error) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var attempt, _loop_1, this_1, state_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        attempt = 0;
                        _loop_1 = function () {
                            var delay, _b, _c;
                            return tslib_1.__generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        if (this_1.closed) {
                                            throw new Error('Connection deliberately closed.');
                                        }
                                        delay = this_1.retryPolicy.getDelay(attempt);
                                        this_1.logger.debug("Retry attempt ".concat(attempt + 1));
                                        if (!(delay > 0)) return [3 /*break*/, 2];
                                        this_1.logger.debug("Retry attempt delayed in ".concat(delay, "ms"));
                                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                                var closeWatcher = window.setInterval(function () {
                                                    if (_this.closed) {
                                                        // Cancel delay immediately when the channel is closed
                                                        window.clearInterval(closeWatcher);
                                                        reject(new Error('Connection deliberately closed.'));
                                                    }
                                                }, 0);
                                                window.setTimeout(function () {
                                                    window.clearInterval(closeWatcher);
                                                    resolve();
                                                }, delay);
                                            })];
                                    case 1:
                                        _d.sent();
                                        _d.label = 2;
                                    case 2:
                                        _d.trys.push([2, 4, , 5]);
                                        _b = {};
                                        return [4 /*yield*/, this_1.channel.publish(message)];
                                    case 3: return [2 /*return*/, (_b.value = _d.sent(), _b)];
                                    case 4:
                                        _c = _d.sent();
                                        attempt += 1;
                                        return [3 /*break*/, 5];
                                    case 5: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _a.label = 1;
                    case 1:
                        if (!this.retryPolicy.shouldRetry(attempt, message, error)) return [3 /*break*/, 3];
                        return [5 /*yield**/, _loop_1()];
                    case 2:
                        state_1 = _a.sent();
                        if (typeof state_1 === "object")
                            return [2 /*return*/, state_1.value];
                        return [3 /*break*/, 1];
                    case 3: throw new Error('Maximum retry attempts reached.');
                }
            });
        });
    };
    RetryChannel.prototype.close = function () {
        this.closed = true;
        return this.channel.close();
    };
    return RetryChannel;
}());
exports.RetryChannel = RetryChannel;

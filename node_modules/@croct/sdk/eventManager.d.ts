export interface EventListener<T> {
    (event: T): void;
}
export declare type EventMap = Record<string, Record<string, any>>;
export interface EventDispatcher<TEvents extends EventMap> {
    dispatch<T extends keyof TEvents>(eventName: T, event: TEvents[T]): void;
}
export interface EventSubscriber<TEvents extends EventMap> {
    addListener<T extends keyof TEvents>(eventName: T, listener: EventListener<TEvents[T]>): void;
    removeListener<T extends keyof TEvents>(eventName: T, listener: EventListener<TEvents[T]>): void;
}
export interface EventManager<DEvents extends EventMap, SEvents extends EventMap = DEvents> extends EventDispatcher<DEvents>, EventSubscriber<SEvents> {
}
export declare class SynchronousEventManager<TEvents extends EventMap> implements EventManager<TEvents> {
    private readonly listeners;
    addListener<T extends keyof TEvents>(type: T, listener: EventListener<TEvents[T]>): void;
    removeListener<T extends keyof TEvents>(eventName: T, listener: EventListener<TEvents[T]>): void;
    dispatch<T extends keyof TEvents>(eventName: T, event: TEvents[T]): void;
}

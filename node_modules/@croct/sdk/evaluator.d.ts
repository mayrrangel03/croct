import { JsonObject, JsonValue } from '@croct/json';
import { TokenProvider } from './token';
import { Location } from './sourceLocation';
import { CidAssigner } from './cid';
export declare type Configuration = {
    appId: string;
    endpointUrl?: string;
    tokenProvider: TokenProvider;
    cidAssigner: CidAssigner;
};
export declare type Campaign = {
    name?: string;
    source?: string;
    medium?: string;
    term?: string;
    content?: string;
};
export declare type Page = {
    title: string;
    url: string;
    referrer?: string;
};
export declare type EvaluationContext = {
    timezone?: string;
    campaign?: Campaign;
    page?: Page;
    attributes?: JsonObject;
};
export declare type EvaluationOptions = {
    timeout?: number;
    context?: EvaluationContext;
};
export declare enum EvaluationErrorType {
    TIMEOUT = "https://croct.help/api/evaluation#timeout",
    UNEXPECTED_ERROR = "https://croct.help/api/evaluation#unexpected-error",
    INVALID_EXPRESSION = "https://croct.help/api/evaluation#invalid-expression",
    TOO_COMPLEX_EXPRESSION = "https://croct.help/api/evaluation#too-complex-expression",
    EVALUATION_FAILED = "https://croct.help/api/evaluation#evaluation-failed",
    UNALLOWED_RESULT = "https://croct.help/api/evaluation#unallowed-result",
    UNSERIALIZABLE_RESULT = "https://croct.help/api/evaluation#unserializable-result"
}
export declare type ErrorResponse = {
    type: EvaluationErrorType;
    title: string;
    status: number;
    detail?: string;
};
export declare class EvaluationError<T extends ErrorResponse = ErrorResponse> extends Error {
    readonly response: T;
    constructor(response: T);
}
declare type ExpressionErrorDetail = {
    cause: string;
    location: Location;
};
export declare type ExpressionErrorResponse = ErrorResponse & {
    errors: ExpressionErrorDetail[];
};
export declare class ExpressionError extends EvaluationError<ExpressionErrorResponse> {
    constructor(response: ExpressionErrorResponse);
}
export declare class Evaluator {
    static readonly MAX_EXPRESSION_LENGTH: number;
    private readonly configuration;
    constructor(configuration: Configuration);
    evaluate(expression: string, options?: EvaluationOptions): Promise<JsonValue>;
    private fetch;
}
export {};

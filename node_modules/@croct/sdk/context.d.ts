import { Token } from './token';
import { Tab, UrlSanitizer } from './tab';
import { EventDispatcher } from './eventManager';
import { SdkEventMap } from './sdkEvents';
import { LocalStorageCache } from './cache';
export declare type TokenScope = 'isolated' | 'global' | 'contextual';
export declare type Configuration = {
    tokenScope: TokenScope;
    urlSanitizer?: UrlSanitizer;
    eventDispatcher: ContextEventDispatcher;
    cache: {
        tabId: LocalStorageCache;
        tabToken: LocalStorageCache;
        browserToken: LocalStorageCache;
    };
};
declare type ContextEventDispatcher = EventDispatcher<Pick<SdkEventMap, 'tokenChanged'>>;
export declare class Context {
    private readonly tab;
    private readonly tokenStore;
    private readonly eventDispatcher;
    private lastToken;
    private constructor();
    static load({ cache, tokenScope, eventDispatcher, urlSanitizer }: Configuration): Context;
    getTab(): Tab;
    isAnonymous(): boolean;
    getUser(): string | null;
    getToken(): Token | null;
    setToken(token: Token | null): void;
    private syncToken;
}
export {};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tab = void 0;
var eventManager_1 = require("./eventManager");
var EventMap = {
    focus: 'focus',
    blur: 'blur',
    beforeunload: 'unload',
    DOMContentLoaded: 'load',
    visibilitychange: 'visibilityChange',
};
var Tab = /** @class */ (function () {
    function Tab(id, isNew, urlSanitizer) {
        this.eventManager = new eventManager_1.SynchronousEventManager();
        this.id = id;
        this.isNew = isNew;
        this.urlSanitizer = urlSanitizer;
        this.initialize();
    }
    Tab.prototype.initialize = function () {
        var _this = this;
        var listener = function (event) {
            _this.emit(EventMap[event.type], new CustomEvent(EventMap[event.type], { detail: { tab: _this } }));
        };
        window.addEventListener('focus', listener, true);
        window.addEventListener('blur', listener, true);
        window.addEventListener('beforeunload', listener, true);
        window.addEventListener('DOMContentLoaded', listener, true);
        document.addEventListener('visibilitychange', function () {
            _this.emit('visibilityChange', new CustomEvent('visibilityChange', {
                detail: {
                    tab: _this,
                    visible: _this.isVisible,
                },
            }));
        }, true);
        Tab.addUrlChangeListener(function (url) {
            _this.emit('urlChange', new CustomEvent('urlChange', { detail: { tab: _this, url: _this.sanitizeUrl(url) } }));
        });
    };
    Object.defineProperty(Tab.prototype, "url", {
        get: function () {
            return this.sanitizeUrl(window.location.href);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "title", {
        get: function () {
            return document.title;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "referrer", {
        get: function () {
            return document.referrer === '' ? '' : this.sanitizeUrl(document.referrer);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "isVisible", {
        get: function () {
            return document.visibilityState === 'visible';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "document", {
        get: function () {
            return document;
        },
        enumerable: false,
        configurable: true
    });
    Tab.prototype.addListener = function (type, listener) {
        this.eventManager.addListener(type, listener);
    };
    Tab.prototype.removeListener = function (type, listener) {
        this.eventManager.removeListener(type, listener);
    };
    Tab.prototype.sanitizeUrl = function (url) {
        var normalized = window.encodeURI(window.decodeURI(url));
        if (this.urlSanitizer !== undefined) {
            return this.urlSanitizer(normalized).toString();
        }
        return normalized;
    };
    Tab.prototype.emit = function (type, event) {
        this.eventManager.dispatch(type, event);
    };
    Tab.addUrlChangeListener = function (listener) {
        var url = window.location.href;
        var updateUrl = function () {
            var currentUrl = window.location.href;
            if (url !== currentUrl) {
                listener(currentUrl);
                url = currentUrl;
            }
        };
        var pushState = window.history.pushState;
        window.history.pushState = function interceptPushState() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var result = pushState.apply(window.history, args);
            updateUrl();
            return result;
        };
        var replaceState = window.history.replaceState;
        window.history.replaceState = function interceptReplaceState() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var result = replaceState.apply(window.history, args);
            updateUrl();
            return result;
        };
        window.addEventListener('popstate', updateUrl, true);
    };
    return Tab;
}());
exports.Tab = Tab;

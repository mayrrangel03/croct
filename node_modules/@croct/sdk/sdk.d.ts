import { Context, TokenScope } from './context';
import { Logger } from './logging';
import { Tracker } from './tracker';
import { Evaluator } from './evaluator';
import { SdkEventMap } from './sdkEvents';
import { EventManager } from './eventManager';
import { CidAssigner } from './cid';
import { UrlSanitizer } from './tab';
export declare type Configuration = {
    appId: string;
    tokenScope: TokenScope;
    debug: boolean;
    test: boolean;
    cid?: string;
    trackerEndpointUrl?: string;
    evaluationEndpointUrl?: string;
    bootstrapEndpointUrl?: string;
    beaconQueueSize?: number;
    urlSanitizer?: UrlSanitizer;
    logger?: Logger;
    eventMetadata?: {
        [key: string]: string;
    };
};
export declare class Sdk {
    private container;
    private closed;
    private constructor();
    static init(configuration: Configuration): Sdk;
    get appId(): string;
    get cidAssigner(): CidAssigner;
    get context(): Context;
    get tracker(): Tracker;
    get evaluator(): Evaluator;
    get eventManager(): EventManager<SdkEventMap>;
    getLogger(...namespace: string[]): Logger;
    getTabStorage(namespace: string, ...subnamespace: string[]): Storage;
    getBrowserStorage(namespace: string, ...subnamespace: string[]): Storage;
    close(): Promise<void>;
}

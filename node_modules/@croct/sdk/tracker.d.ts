import { Logger } from './logging';
import { Tab } from './tab';
import { OutputChannel } from './channel';
import { TokenProvider } from './token';
import { RetryPolicy } from './retry';
import { Beacon, TrackingEvent, TrackingEventContext, PartialTrackingEvent } from './trackingEvents';
declare type Options = {
    eventMetadata?: {
        [key: string]: string;
    };
};
export declare type Configuration = Options & {
    channel: OutputChannel<Beacon>;
    logger?: Logger;
    tab: Tab;
    tokenProvider: TokenProvider;
    inactivityRetryPolicy: RetryPolicy<number>;
};
export declare type EventInfo<T extends TrackingEvent = TrackingEvent> = {
    context: TrackingEventContext;
    event: T;
    timestamp: number;
    status: 'pending' | 'confirmed' | 'failed' | 'ignored';
};
export interface EventListener {
    (event: EventInfo): void;
}
export declare class Tracker {
    private readonly options;
    private tab;
    private tokenProvider;
    private inactivityRetryPolicy;
    private readonly channel;
    private readonly logger;
    private readonly listeners;
    private readonly pending;
    private readonly state;
    private readonly inactivityTimer;
    constructor({ tab, tokenProvider, channel, logger, inactivityRetryPolicy, ...options }: Configuration);
    addListener(listener: EventListener): void;
    removeListener(listener: EventListener): void;
    get flushed(): Promise<void>;
    isEnabled(): boolean;
    isSuspended(): boolean;
    enable(): void;
    disable(): void;
    suspend(): void;
    unsuspend(): void;
    private initialize;
    private stopInactivityTimer;
    private startInactivityTimer;
    track<T extends PartialTrackingEvent>(event: T, timestamp?: number): Promise<T>;
    private trackPageOpen;
    private trackPageLoad;
    private trackTabOpen;
    private trackTabUrlChange;
    private trackTabVisibilityChange;
    private trackInactivity;
    private enqueue;
    private notifyEvent;
    private publish;
    private enrichEvent;
    private createBeacon;
    private createBeaconPayload;
    private enrichBeaconPayload;
}
export {};

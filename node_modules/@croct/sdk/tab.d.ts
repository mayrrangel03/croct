import { EventListener } from './eventManager';
export declare type TabEvent<T = Record<string, unknown>> = CustomEvent<{
    tab: Tab;
} & T>;
export declare type TabVisibilityChangeEvent = TabEvent<{
    visible: boolean;
}>;
export declare type TabUrlChangeEvent = TabEvent<{
    url: string;
}>;
export declare type UrlSanitizer = (url: string) => URL;
declare type TabEventMap = {
    focus: TabEvent;
    blur: TabEvent;
    load: TabEvent;
    unload: TabEvent;
    visibilityChange: TabVisibilityChangeEvent;
    urlChange: TabUrlChangeEvent;
};
export declare class Tab {
    readonly id: string;
    readonly isNew: boolean;
    readonly urlSanitizer?: UrlSanitizer;
    private readonly eventManager;
    constructor(id: string, isNew: boolean, urlSanitizer?: UrlSanitizer);
    private initialize;
    get url(): string;
    get title(): string;
    get referrer(): string;
    get isVisible(): boolean;
    get document(): Document;
    addListener<T extends keyof TabEventMap>(type: T, listener: EventListener<TabEventMap[T]>): void;
    removeListener<T extends keyof TabEventMap>(type: T, listener: EventListener<TabEventMap[T]>): void;
    private sanitizeUrl;
    private emit;
    private static addUrlChangeListener;
}
export {};

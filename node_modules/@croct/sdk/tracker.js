"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tracker = void 0;
var tslib_1 = require("tslib");
var logging_1 = require("./logging");
var error_1 = require("./error");
var trackingEvents_1 = require("./trackingEvents");
var trackedEvents = {};
var Tracker = /** @class */ (function () {
    function Tracker(_a) {
        var _b;
        var tab = _a.tab, tokenProvider = _a.tokenProvider, channel = _a.channel, logger = _a.logger, inactivityRetryPolicy = _a.inactivityRetryPolicy, options = tslib_1.__rest(_a, ["tab", "tokenProvider", "channel", "logger", "inactivityRetryPolicy"]);
        this.listeners = [];
        this.pending = [];
        this.state = {
            enabled: false,
            initialized: false,
            suspended: false,
        };
        this.inactivityTimer = {
            since: 0,
        };
        this.tab = tab;
        this.tokenProvider = tokenProvider;
        this.inactivityRetryPolicy = inactivityRetryPolicy;
        this.channel = channel;
        this.logger = logger !== null && logger !== void 0 ? logger : new logging_1.NullLogger();
        this.options = tslib_1.__assign(tslib_1.__assign({}, options), { eventMetadata: (_b = options.eventMetadata) !== null && _b !== void 0 ? _b : {} });
        this.enable = this.enable.bind(this);
        this.disable = this.disable.bind(this);
        this.suspend = this.suspend.bind(this);
        this.unsuspend = this.unsuspend.bind(this);
        this.trackPageLoad = this.trackPageLoad.bind(this);
        this.trackTabVisibilityChange = this.trackTabVisibilityChange.bind(this);
        this.trackTabUrlChange = this.trackTabUrlChange.bind(this);
        this.trackInactivity = this.trackInactivity.bind(this);
    }
    Tracker.prototype.addListener = function (listener) {
        this.listeners.push(listener);
    };
    Tracker.prototype.removeListener = function (listener) {
        var index = this.listeners.indexOf(listener);
        while (index >= 0) {
            this.listeners.splice(index, 1);
            index = this.listeners.indexOf(listener);
        }
    };
    Object.defineProperty(Tracker.prototype, "flushed", {
        get: function () {
            var suppress = function () {
                // suppress errors
            };
            return Promise.all(this.pending).then(suppress, suppress);
        },
        enumerable: false,
        configurable: true
    });
    Tracker.prototype.isEnabled = function () {
        return this.state.enabled;
    };
    Tracker.prototype.isSuspended = function () {
        return this.state.suspended;
    };
    Tracker.prototype.enable = function () {
        if (this.state.enabled) {
            return;
        }
        this.logger.info('Tracker enabled');
        this.state.enabled = true;
        if (this.state.suspended) {
            return;
        }
        this.startInactivityTimer();
        if (!this.state.initialized) {
            this.state.initialized = true;
            this.initialize();
        }
        this.tab.addListener('load', this.trackPageLoad);
        this.tab.addListener('urlChange', this.trackTabUrlChange);
        this.tab.addListener('visibilityChange', this.trackTabVisibilityChange);
    };
    Tracker.prototype.disable = function () {
        if (!this.state.enabled) {
            return;
        }
        this.logger.info('Tracker disabled');
        this.state.enabled = false;
        if (this.state.suspended) {
            return;
        }
        this.tab.removeListener('load', this.trackPageLoad);
        this.tab.removeListener('urlChange', this.trackTabUrlChange);
        this.tab.removeListener('visibilityChange', this.trackTabVisibilityChange);
        this.stopInactivityTimer();
    };
    Tracker.prototype.suspend = function () {
        if (this.state.suspended) {
            return;
        }
        this.logger.info('Tracker suspended');
        if (this.state.enabled) {
            this.disable();
            this.state.enabled = true;
        }
        this.state.suspended = true;
    };
    Tracker.prototype.unsuspend = function () {
        if (!this.state.suspended) {
            return;
        }
        this.logger.info('Tracker unsuspended');
        this.state.suspended = false;
        if (this.state.enabled) {
            this.state.enabled = false;
            this.enable();
        }
    };
    Tracker.prototype.initialize = function () {
        if (trackedEvents[this.tab.id] === undefined) {
            trackedEvents[this.tab.id] = {};
        }
        var initEvents = trackedEvents[this.tab.id];
        if (this.tab.isNew && !initEvents.tabOpened) {
            initEvents.tabOpened = true;
            this.trackTabOpen({ tabId: this.tab.id });
        }
        if (!initEvents.pageOpened) {
            initEvents.pageOpened = true;
            this.trackPageOpen({
                url: this.tab.url,
                referrer: this.tab.referrer,
            });
        }
    };
    Tracker.prototype.stopInactivityTimer = function () {
        if (this.inactivityTimer.id !== undefined) {
            window.clearTimeout(this.inactivityTimer.id);
            delete this.inactivityTimer.id;
        }
    };
    Tracker.prototype.startInactivityTimer = function () {
        var _this = this;
        this.stopInactivityTimer();
        this.inactivityTimer.since = Date.now();
        var iteration = -1;
        var startTimer = function () {
            if (!_this.inactivityRetryPolicy.shouldRetry(iteration + 1, _this.inactivityTimer.since)) {
                window.clearTimeout(_this.inactivityTimer.id);
                return;
            }
            iteration += 1;
            _this.inactivityTimer.id = window.setTimeout(function () {
                _this.trackInactivity();
                startTimer();
            }, _this.inactivityRetryPolicy.getDelay(iteration));
        };
        startTimer();
    };
    Tracker.prototype.track = function (event, timestamp) {
        if (timestamp === void 0) { timestamp = Date.now(); }
        return this.publish(this.enrichEvent(event, timestamp), timestamp).then(function () { return event; });
    };
    Tracker.prototype.trackPageOpen = function (_a) {
        var referrer = _a.referrer, payload = tslib_1.__rest(_a, ["referrer"]);
        this.enqueue(tslib_1.__assign(tslib_1.__assign({ type: 'pageOpened' }, payload), (referrer.length > 0 ? { referrer: referrer } : {})));
    };
    Tracker.prototype.trackPageLoad = function (_a) {
        var tab = _a.detail.tab;
        this.enqueue({
            type: 'pageLoaded',
            url: tab.url,
            title: tab.title,
            lastModifiedTime: Date.parse(tab.document.lastModified),
        });
    };
    Tracker.prototype.trackTabOpen = function (payload) {
        this.enqueue(tslib_1.__assign({ type: 'tabOpened' }, payload));
    };
    Tracker.prototype.trackTabUrlChange = function (_a) {
        var detail = _a.detail;
        this.enqueue({
            type: 'tabUrlChanged',
            tabId: detail.tab.id,
            url: detail.url,
        });
    };
    Tracker.prototype.trackTabVisibilityChange = function (_a) {
        var detail = _a.detail;
        this.enqueue({
            type: 'tabVisibilityChanged',
            tabId: detail.tab.id,
            visibility: detail.visible ? 'visible' : 'hidden',
        });
    };
    Tracker.prototype.trackInactivity = function () {
        this.enqueue({
            type: 'nothingChanged',
            sinceTime: this.inactivityTimer.since,
        });
    };
    Tracker.prototype.enqueue = function (event, timestamp) {
        if (timestamp === void 0) { timestamp = Date.now(); }
        this.publish(event, timestamp).catch(function () {
            // suppress error
        });
    };
    Tracker.prototype.notifyEvent = function (event) {
        this.listeners.map(function (listener) { return listener(event); });
    };
    Tracker.prototype.publish = function (event, timestamp) {
        var _this = this;
        if (event.type !== 'nothingChanged') {
            this.stopInactivityTimer();
        }
        var metadata = this.options.eventMetadata;
        var context = tslib_1.__assign({ tabId: this.tab.id, url: this.tab.url }, (Object.keys(metadata).length > 0 ? { metadata: metadata } : {}));
        var eventInfo = {
            event: event,
            context: context,
            timestamp: timestamp,
            status: 'pending',
        };
        if (this.state.suspended) {
            this.logger.warn("Tracker is suspended, ignoring event \"".concat(event.type, "\""));
            this.notifyEvent(tslib_1.__assign(tslib_1.__assign({}, eventInfo), { status: 'ignored' }));
            return Promise.reject(new Error('The tracker is suspended.'));
        }
        this.logger.info("Tracked event \"".concat(event.type, "\""));
        this.notifyEvent(eventInfo);
        return new Promise(function (resolve, reject) {
            var promise = _this.channel.publish(_this.createBeacon(event, timestamp, context)).then(function () {
                _this.logger.debug("Successfully published event \"".concat(event.type, "\""));
                _this.notifyEvent(tslib_1.__assign(tslib_1.__assign({}, eventInfo), { status: 'confirmed' }));
                resolve(event);
            }, function (cause) {
                _this.logger.error("Failed to publish event \"".concat(event.type, "\", reason: ").concat((0, error_1.formatCause)(cause)));
                _this.notifyEvent(tslib_1.__assign(tslib_1.__assign({}, eventInfo), { status: 'failed' }));
                reject(cause);
            });
            _this.pending.push(promise);
            promise.finally(function () {
                _this.pending.splice(_this.pending.indexOf(promise), 1);
            });
            if (_this.state.enabled && event.type !== 'nothingChanged') {
                _this.startInactivityTimer();
            }
        });
    };
    Tracker.prototype.enrichEvent = function (event, timestamp) {
        if ((0, trackingEvents_1.isCartPartialEvent)(event)) {
            var _a = event.cart, _b = _a.lastUpdateTime, lastUpdateTime = _b === void 0 ? timestamp : _b, cart = tslib_1.__rest(_a, ["lastUpdateTime"]), payload = tslib_1.__rest(event, ["cart"]);
            return tslib_1.__assign(tslib_1.__assign({}, payload), { cart: tslib_1.__assign(tslib_1.__assign({}, cart), { lastUpdateTime: lastUpdateTime }) });
        }
        return event;
    };
    Tracker.prototype.createBeacon = function (event, timestamp, context) {
        var token = this.tokenProvider.getToken();
        return tslib_1.__assign(tslib_1.__assign({ timestamp: timestamp }, (token !== null ? { token: token.toString() } : {})), { context: context, payload: this.enrichBeaconPayload(this.createBeaconPayload(event)) });
    };
    Tracker.prototype.createBeaconPayload = function (event) {
        if (!(0, trackingEvents_1.isIdentifiedUserEvent)(event)) {
            return event;
        }
        if (event.type === 'userSignedUp' && event.profile !== undefined) {
            var userId_1 = event.userId, profile = event.profile, payload_1 = tslib_1.__rest(event, ["userId", "profile"]);
            return tslib_1.__assign(tslib_1.__assign({}, payload_1), { externalUserId: userId_1, patch: {
                    operations: [
                        {
                            type: 'set',
                            path: '.',
                            value: profile,
                        },
                    ],
                } });
        }
        var userId = event.userId, payload = tslib_1.__rest(event, ["userId"]);
        return tslib_1.__assign(tslib_1.__assign({}, payload), { externalUserId: userId });
    };
    Tracker.prototype.enrichBeaconPayload = function (event) {
        switch (event.type) {
            case 'linkOpened':
                return tslib_1.__assign(tslib_1.__assign({}, event), { link: new URL(event.link, this.tab.url).toString() });
            default:
                return event;
        }
    };
    return Tracker;
}());
exports.Tracker = Tracker;

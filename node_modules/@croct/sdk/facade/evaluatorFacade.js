"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabContextFactory = exports.MinimalContextFactory = exports.EvaluatorFacade = void 0;
var tslib_1 = require("tslib");
var schema_1 = require("../schema");
var error_1 = require("../error");
function validate(options) {
    if (typeof options !== 'object' || options === null) {
        throw new Error('The options must be an object.');
    }
    try {
        schema_1.optionsSchema.validate(options);
    }
    catch (violation) {
        throw new Error("Invalid options: ".concat((0, error_1.formatCause)(violation)));
    }
}
var EvaluatorFacade = /** @class */ (function () {
    function EvaluatorFacade(evaluator, contextFactory) {
        this.evaluator = evaluator;
        this.contextFactory = contextFactory;
    }
    EvaluatorFacade.prototype.evaluate = function (expression, options) {
        if (options === void 0) { options = {}; }
        if (typeof expression !== 'string' || expression.length === 0) {
            throw new Error('The expression must be a non-empty string.');
        }
        validate(options);
        return this.evaluator.evaluate(expression, {
            timeout: options.timeout,
            context: this.contextFactory.createContext(options.attributes),
        });
    };
    return EvaluatorFacade;
}());
exports.EvaluatorFacade = EvaluatorFacade;
var MinimalContextFactory = /** @class */ (function () {
    function MinimalContextFactory() {
    }
    MinimalContextFactory.prototype.createContext = function (attributes) {
        if (attributes === undefined) {
            return {};
        }
        return { attributes: attributes };
    };
    return MinimalContextFactory;
}());
exports.MinimalContextFactory = MinimalContextFactory;
var TabContextFactory = /** @class */ (function () {
    function TabContextFactory(tab) {
        this.tab = tab;
    }
    TabContextFactory.prototype.createContext = function (attributes) {
        var url = new URL(this.tab.url);
        var context = {};
        var page = {
            title: this.tab.title,
            url: url.toString(),
        };
        var referrer = this.tab.referrer;
        if (referrer.length > 0) {
            page.referrer = referrer;
        }
        context.page = page;
        var timezone = Intl.DateTimeFormat().resolvedOptions().timeZone || null;
        if (timezone !== null) {
            context.timezone = timezone;
        }
        var campaign = TabContextFactory.createCampaign(url);
        if (Object.keys(campaign).length > 0) {
            context.campaign = campaign;
        }
        if (attributes !== undefined && Object.keys(attributes).length > 0) {
            context.attributes = attributes;
        }
        return context;
    };
    TabContextFactory.createCampaign = function (url) {
        var e_1, _a;
        var campaign = {};
        try {
            for (var _b = tslib_1.__values(url.searchParams.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib_1.__read(_c.value, 2), parameter = _d[0], value = _d[1];
                switch (parameter.toLowerCase()) {
                    case 'utm_campaign':
                        campaign.name = value;
                        break;
                    case 'utm_source':
                        campaign.source = value;
                        break;
                    case 'utm_term':
                        campaign.term = value;
                        break;
                    case 'utm_medium':
                        campaign.medium = value;
                        break;
                    case 'utm_content':
                        campaign.content = value;
                        break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return campaign;
    };
    return TabContextFactory;
}());
exports.TabContextFactory = TabContextFactory;

import { EvaluatorFacade } from './evaluatorFacade';
import { TrackerFacade } from './trackerFacade';
import { Context, TokenScope } from '../context';
import { UserFacade } from './userFacade';
import { Token } from '../token';
import { SessionFacade } from './sessionFacade';
import { Logger } from '../logging';
import { SdkEventMap } from '../sdkEvents';
import { EventManager } from '../eventManager';
import { CidAssigner } from '../cid';
import { UrlSanitizer } from '../tab';
export declare type Configuration = {
    appId: string;
    tokenScope?: TokenScope;
    debug?: boolean;
    test?: boolean;
    track?: boolean;
    token?: string | null;
    userId?: string;
    eventMetadata?: {
        [key: string]: string;
    };
    logger?: Logger;
    urlSanitizer?: UrlSanitizer;
    trackerEndpointUrl?: string;
    evaluationEndpointUrl?: string;
    bootstrapEndpointUrl?: string;
};
export declare class SdkFacade {
    private readonly sdk;
    private trackerFacade?;
    private userFacade?;
    private sessionFacade?;
    private evaluatorFacade?;
    private constructor();
    static init(configuration: Configuration): SdkFacade;
    get context(): Context;
    get cidAssigner(): CidAssigner;
    get tracker(): TrackerFacade;
    get user(): UserFacade;
    get session(): SessionFacade;
    get evaluator(): EvaluatorFacade;
    get eventManager(): EventManager<Record<string, Record<string, unknown>>, SdkEventMap>;
    identify(userId: string): void;
    anonymize(): void;
    getToken(): Token | null;
    setToken(token: Token): void;
    unsetToken(): void;
    private trackInternalEvent;
    getLogger(...namespace: string[]): Logger;
    getTabStorage(namespace: string, ...subnamespace: string[]): Storage;
    getBrowserStorage(namespace: string, ...subnamespace: string[]): Storage;
    close(): Promise<void>;
}

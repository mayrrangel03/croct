"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrackerFacade = void 0;
var tslib_1 = require("tslib");
var error_1 = require("../error");
var schema_1 = require("../schema");
var eventSchemas = {
    cartViewed: schema_1.cartViewed,
    cartModified: schema_1.cartModified,
    checkoutStarted: schema_1.checkoutStarted,
    orderPlaced: schema_1.orderPlaced,
    productViewed: schema_1.productViewed,
    userSignedUp: schema_1.userSignedUp,
    eventOccurred: schema_1.eventOccurred,
    interestShown: schema_1.interestShown,
    postViewed: schema_1.postViewed,
    goalCompleted: schema_1.goalCompleted,
    linkOpened: schema_1.linkOpened,
};
function createEvent(type, payload) {
    if (typeof type !== 'string') {
        throw new Error('The event type must of type string.');
    }
    if (typeof payload !== 'object' || payload == null) {
        throw new Error('The event payload must of type object.');
    }
    var event = tslib_1.__assign({ type: type }, payload);
    validateEvent(event);
    return event;
}
function validateEvent(event) {
    var type = event.type, payload = tslib_1.__rest(event, ["type"]);
    if (!(type in eventSchemas)) {
        throw new Error("Unknown event type '".concat(type, "'."));
    }
    try {
        eventSchemas[type].validate(payload);
    }
    catch (violation) {
        throw new Error("Invalid event payload: ".concat((0, error_1.formatCause)(violation)));
    }
}
var TrackerFacade = /** @class */ (function () {
    function TrackerFacade(tracker) {
        this.tracker = tracker;
    }
    Object.defineProperty(TrackerFacade.prototype, "flushed", {
        get: function () {
            return this.tracker.flushed;
        },
        enumerable: false,
        configurable: true
    });
    TrackerFacade.prototype.enable = function () {
        this.tracker.enable();
    };
    TrackerFacade.prototype.disable = function () {
        this.tracker.disable();
    };
    TrackerFacade.prototype.addListener = function (listener) {
        this.tracker.addListener(listener);
    };
    TrackerFacade.prototype.removeListener = function (listener) {
        this.tracker.removeListener(listener);
    };
    TrackerFacade.prototype.track = function (type, payload) {
        return this.tracker.track(createEvent(type, payload));
    };
    return TrackerFacade;
}());
exports.TrackerFacade = TrackerFacade;

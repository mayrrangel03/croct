import { Logger } from './logging';
import { Context, TokenScope } from './context';
import { MonitoredQueue } from './queue';
import { TokenProvider } from './token';
import { Tracker } from './tracker';
import { Evaluator } from './evaluator';
import { CidAssigner } from './cid';
import { EventManager } from './eventManager';
import { SdkEventMap } from './sdkEvents';
import { UrlSanitizer } from './tab';
export declare type Configuration = {
    appId: string;
    tokenScope: TokenScope;
    cid?: string;
    debug: boolean;
    test: boolean;
    trackerEndpointUrl: string;
    evaluationEndpointUrl: string;
    bootstrapEndpointUrl: string;
    beaconQueueSize: number;
    logger?: Logger;
    urlSanitizer?: UrlSanitizer;
    eventMetadata?: {
        [key: string]: string;
    };
};
export declare class Container {
    private readonly configuration;
    private context?;
    private tokenProvider?;
    private tracker?;
    private evaluator?;
    private cidAssigner?;
    private beaconChannel?;
    private beaconQueue?;
    private removeTokenSyncListener?;
    private readonly eventManager;
    constructor(configuration: Configuration);
    getConfiguration(): Configuration;
    getEvaluator(): Evaluator;
    private createEvaluator;
    getTracker(): Tracker;
    private createTracker;
    getTokenProvider(): TokenProvider;
    getContext(): Context;
    private createContext;
    private getBeaconChannel;
    private createBeaconChannel;
    getCidAssigner(): CidAssigner;
    private createCidAssigner;
    getBeaconQueue(): MonitoredQueue<string>;
    private createBeaconQueue;
    getLogger(...namespace: string[]): Logger;
    getTabStorage(namespace: string, ...subnamespace: string[]): Storage;
    getBrowserStorage(namespace: string, ...subnamespace: string[]): Storage;
    private getGlobalTabStorage;
    private getGlobalBrowserStorage;
    private resolveStorageNamespace;
    private getLocalStorage;
    private getSessionStorage;
    getEventManager(): EventManager<SdkEventMap>;
    dispose(): Promise<void>;
}

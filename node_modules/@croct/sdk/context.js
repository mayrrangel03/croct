"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = void 0;
var token_1 = require("./token");
var tab_1 = require("./tab");
var uuid_1 = require("./uuid");
function tokenEquals(left, right) {
    return left === right || (left !== null && right !== null && left.toString() === right.toString());
}
var Context = /** @class */ (function () {
    function Context(tab, tokenStore, eventDispatcher) {
        this.tab = tab;
        this.tokenStore = tokenStore;
        this.eventDispatcher = eventDispatcher;
        this.lastToken = tokenStore.getToken();
        this.syncToken = this.syncToken.bind(this);
    }
    Context.load = function (_a) {
        var cache = _a.cache, tokenScope = _a.tokenScope, eventDispatcher = _a.eventDispatcher, urlSanitizer = _a.urlSanitizer;
        var tabId = cache.tabId.get();
        var newTab = false;
        if (tabId === null) {
            tabId = (0, uuid_1.uuid4)(true);
            newTab = true;
        }
        var tab = new tab_1.Tab(tabId, newTab, urlSanitizer);
        cache.tabId.clear();
        tab.addListener('unload', function () { return cache.tabId.put(tab.id); });
        switch (tokenScope) {
            case 'isolated':
                return new Context(tab, new token_1.InMemoryTokenStore(), eventDispatcher);
            case 'global': {
                var context = new Context(tab, new token_1.CachedTokenStore(cache.browserToken), eventDispatcher);
                cache.browserToken.addListener(context.syncToken);
                return context;
            }
            case 'contextual': {
                var primaryStorage_1 = new token_1.CachedTokenStore(cache.tabToken);
                var secondaryStorage_1 = new token_1.CachedTokenStore(cache.browserToken);
                if (tab.isNew) {
                    primaryStorage_1.setToken(secondaryStorage_1.getToken());
                }
                tab.addListener('visibilityChange', function (event) {
                    if (event.detail.visible) {
                        secondaryStorage_1.setToken(primaryStorage_1.getToken());
                    }
                });
                return new Context(tab, new token_1.ReplicatedTokenStore(primaryStorage_1, secondaryStorage_1), eventDispatcher);
            }
        }
    };
    Context.prototype.getTab = function () {
        return this.tab;
    };
    Context.prototype.isAnonymous = function () {
        var token = this.getToken();
        return token == null || token.isAnonymous();
    };
    Context.prototype.getUser = function () {
        var token = this.getToken();
        return token == null ? null : token.getSubject();
    };
    Context.prototype.getToken = function () {
        return this.tokenStore.getToken();
    };
    Context.prototype.setToken = function (token) {
        var oldToken = this.lastToken;
        this.lastToken = token;
        this.tokenStore.setToken(token);
        if (!tokenEquals(oldToken, token)) {
            this.eventDispatcher.dispatch('tokenChanged', {
                oldToken: oldToken,
                newToken: token,
            });
        }
    };
    Context.prototype.syncToken = function () {
        var newToken = this.tokenStore.getToken();
        var oldToken = this.lastToken;
        if (!tokenEquals(oldToken, newToken)) {
            this.lastToken = newToken;
            this.eventDispatcher.dispatch('tokenChanged', {
                oldToken: oldToken,
                newToken: newToken,
            });
        }
    };
    return Context;
}());
exports.Context = Context;

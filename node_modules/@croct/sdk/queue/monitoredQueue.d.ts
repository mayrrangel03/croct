import { Queue } from './queue';
import { Logger } from '../logging';
export declare type QueueStatus = 'halfEmpty' | 'almostEmpty' | 'empty' | 'halfFull' | 'almostFull' | 'full';
export declare type QueueCallback<T> = {
    (queue: Queue<T>): void;
};
export declare class MonitoredQueue<T> implements Queue<T> {
    private readonly queue;
    private readonly logger;
    private readonly callbacks;
    private status;
    constructor(queue: Queue<T>, logger?: Logger);
    all(): T[];
    getCapacity(): number;
    addCallback(status: QueueStatus, callback: QueueCallback<T>): void;
    removeCallback(type: QueueStatus, callback: QueueCallback<T>): void;
    private setStatus;
    private report;
    isEmpty(): boolean;
    length(): number;
    peek(): T | null;
    push(value: T): void;
    shift(): T;
    private updateStatus;
}

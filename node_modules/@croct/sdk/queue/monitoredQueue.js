"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoredQueue = void 0;
var logging_1 = require("../logging");
var MonitoredQueue = /** @class */ (function () {
    function MonitoredQueue(queue, logger) {
        this.callbacks = {};
        this.queue = queue;
        this.logger = logger !== null && logger !== void 0 ? logger : new logging_1.NullLogger();
        this.updateStatus();
    }
    MonitoredQueue.prototype.all = function () {
        return this.queue.all();
    };
    MonitoredQueue.prototype.getCapacity = function () {
        return this.queue.getCapacity();
    };
    MonitoredQueue.prototype.addCallback = function (status, callback) {
        var callbacks = this.callbacks[status] || [];
        if (!callbacks.includes(callback)) {
            callbacks.push(callback);
        }
        this.callbacks[status] = callbacks;
        switch (this.status) {
            case status:
                callback(this);
                break;
            case 'empty':
            case 'almostEmpty':
                if (status === 'halfEmpty') {
                    callback(this);
                }
                break;
            case 'full':
            case 'almostFull':
                if (status === 'halfFull') {
                    callback(this);
                }
                break;
        }
    };
    MonitoredQueue.prototype.removeCallback = function (type, callback) {
        var callbacks = this.callbacks[type];
        if (!callbacks) {
            return;
        }
        var index = callbacks.indexOf(callback);
        if (index >= 0) {
            callbacks.splice(index, 1);
        }
    };
    MonitoredQueue.prototype.setStatus = function (status) {
        if (this.status === status) {
            return;
        }
        this.logger.debug("Queue status changed to \"".concat(status, "\""));
        this.report(status);
        this.status = status;
    };
    MonitoredQueue.prototype.report = function (status) {
        var _this = this;
        var callbacks = this.callbacks[status];
        if (callbacks !== undefined) {
            callbacks.forEach(function (callback) { return callback(_this); });
        }
        switch (status) {
            case 'empty':
            case 'almostEmpty':
                this.report('halfEmpty');
                break;
            case 'full':
            case 'almostFull':
                this.report('halfFull');
                break;
            default:
                break;
        }
    };
    MonitoredQueue.prototype.isEmpty = function () {
        return this.queue.isEmpty();
    };
    MonitoredQueue.prototype.length = function () {
        return this.queue.length();
    };
    MonitoredQueue.prototype.peek = function () {
        return this.queue.peek();
    };
    MonitoredQueue.prototype.push = function (value) {
        this.queue.push(value);
        this.updateStatus();
    };
    MonitoredQueue.prototype.shift = function () {
        var value = this.queue.shift();
        this.updateStatus();
        return value;
    };
    MonitoredQueue.prototype.updateStatus = function () {
        var length = this.queue.length();
        var capacity = this.getCapacity();
        if (length <= capacity * 0.5) {
            if (length === 0) {
                this.setStatus('empty');
            }
            else if (length <= capacity * 0.25) {
                this.setStatus('almostEmpty');
            }
            else {
                this.setStatus('halfEmpty');
            }
            return;
        }
        if (length >= capacity) {
            this.setStatus('full');
        }
        else if (length >= capacity * 0.75) {
            this.setStatus('almostFull');
        }
        else {
            this.setStatus('halfFull');
        }
    };
    return MonitoredQueue;
}());
exports.MonitoredQueue = MonitoredQueue;

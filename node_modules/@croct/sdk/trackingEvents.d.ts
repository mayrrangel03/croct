import { Patch } from './patch';
import { DistributiveOmit, Optional } from './utilityTypes';
export declare type ProductDetails = {
    productId: string;
    productSku?: string;
    name: string;
    category?: string;
    brand?: string;
    variant?: string;
    displayPrice: number;
    originalPrice?: number;
    url?: string;
    imageUrl?: string;
};
export declare type CartItem = {
    index: number;
    product: ProductDetails;
    quantity: number;
    total: number;
    discount?: number;
    coupon?: string;
};
export declare type Cart = {
    currency: string;
    items: CartItem[];
    subtotal?: number;
    shippingPrice?: number;
    taxes?: {
        [key: string]: number;
    };
    costs?: {
        [key: string]: number;
    };
    discount?: number;
    total: number;
    coupon?: string;
    lastUpdateTime: number;
};
export declare type OrderItem = {
    index: number;
    product: ProductDetails;
    quantity?: number;
    total: number;
    discount?: number;
    coupon?: string;
};
export declare type OrderStatus = 'placed' | 'paid' | 'completed';
export declare type Order = {
    orderId: string;
    currency: string;
    items: OrderItem[];
    subtotal?: number;
    shippingPrice?: number;
    taxes?: {
        [key: string]: number;
    };
    costs?: {
        [key: string]: number;
    };
    discount?: number;
    total: number;
    coupon?: string;
    paymentMethod?: string;
    installments?: number;
    status?: OrderStatus;
};
export declare type Gender = 'male' | 'female' | 'neutral' | 'unknown';
export declare const pageEventTypes: readonly ["pageLoaded", "pageOpened"];
export declare const tabEventTypes: readonly ["tabOpened", "tabUrlChanged", "tabVisibilityChanged"];
export declare const cartEventTypes: readonly ["cartModified", "cartViewed", "checkoutStarted"];
export declare const ecommerceEventTypes: readonly ["cartModified", "cartViewed", "checkoutStarted", "orderPlaced", "productViewed"];
export declare const identifiedUserEventTypes: string[];
export declare const userEventTypes: readonly [...string[], "userProfileChanged"];
export declare const miscEventTypes: readonly ["nothingChanged", "sessionAttributesChanged", "goalCompleted", "interestShown", "postViewed", "eventOccurred", "linkOpened"];
export declare const eventTypes: readonly ["pageLoaded", "pageOpened", "cartModified", "cartViewed", "checkoutStarted", "orderPlaced", "productViewed", ...string[], "userProfileChanged", "nothingChanged", "sessionAttributesChanged", "goalCompleted", "interestShown", "postViewed", "eventOccurred", "linkOpened"];
interface BaseEvent {
    type: string;
}
export interface UserProfileChanged extends BaseEvent {
    type: 'userProfileChanged';
    patch: Patch;
}
declare type Primitive = null | string | number | boolean;
declare type PrimitiveMap = {
    [member: string]: Primitive;
};
declare type PrimitiveArray = Primitive[];
declare type TwoLevelMap = {
    [member: string]: Primitive | PrimitiveMap | PrimitiveArray;
};
declare type TwoLevelArray = PrimitiveArray | PrimitiveMap[] | PrimitiveArray[];
declare type CustomAttribute = Primitive | TwoLevelMap | TwoLevelArray;
declare type UserProfile = {
    firstName?: string;
    lastName?: string;
    birthDate?: string;
    gender?: Gender;
    email?: string;
    alternateEmail?: string;
    phone?: string;
    alternatePhone?: string;
    address?: {
        street?: string;
        district?: string;
        city?: string;
        region?: string;
        country?: string;
        postalCode?: string;
    };
    avatar?: string;
    company?: string;
    companyUrl?: string;
    jobTitle?: string;
    interests?: string[];
    activities?: string[];
    custom?: {
        [member: string]: CustomAttribute;
    };
};
export interface UserSignedUp extends BaseEvent {
    type: 'userSignedUp';
    userId: string;
    profile?: UserProfile;
}
export interface UserSignedIn extends BaseEvent {
    type: 'userSignedIn';
    userId: string;
}
export interface UserSignedOut extends BaseEvent {
    type: 'userSignedOut';
    userId: string;
}
export declare type IdentifiedUserEvent = UserSignedIn | UserSignedOut | UserSignedUp;
export declare type UserEvent = UserProfileChanged | IdentifiedUserEvent;
export declare type CartEventType = typeof cartEventTypes[number];
interface BaseCartEvent extends BaseEvent {
    type: CartEventType;
    cart: Cart;
}
export interface CartViewed extends BaseCartEvent {
    type: 'cartViewed';
}
export interface CartModified extends BaseCartEvent {
    type: 'cartModified';
}
export interface CheckoutStarted extends BaseCartEvent {
    type: 'checkoutStarted';
    orderId?: string;
}
export declare type CartEvent = CartModified | CartViewed | CheckoutStarted;
export interface OrderPlaced extends BaseEvent {
    type: 'orderPlaced';
    order: Order;
}
export interface ProductViewed extends BaseEvent {
    type: 'productViewed';
    product: ProductDetails;
}
export declare type EcommerceEvent = OrderPlaced | ProductViewed | CartEvent;
/**
 * Tab event
 */
export declare type TabEventType = typeof tabEventTypes[number];
interface BaseTabEvent extends BaseEvent {
    type: TabEventType;
    tabId: string;
}
export interface TabOpened extends BaseTabEvent {
    type: 'tabOpened';
}
export interface TabUrlChanged extends BaseTabEvent {
    type: 'tabUrlChanged';
    url: string;
}
export interface TabVisibilityChanged extends BaseTabEvent {
    type: 'tabVisibilityChanged';
    visibility: 'visible' | 'hidden';
}
export declare type TabEvent = TabVisibilityChanged | TabUrlChanged | TabOpened;
export declare type PageEventType = typeof pageEventTypes[number];
interface BasePageEvent extends BaseEvent {
    type: PageEventType;
    url: string;
}
export interface PageOpened extends BasePageEvent {
    type: 'pageOpened';
    referrer?: string;
}
export interface PageLoaded extends BasePageEvent {
    type: 'pageLoaded';
    title: string;
    lastModifiedTime: number;
}
export declare type PageEvent = PageLoaded | PageOpened;
export interface NothingChanged extends BaseEvent {
    type: 'nothingChanged';
    sinceTime: number;
}
export interface SessionAttributesChanged extends BaseEvent {
    type: 'sessionAttributesChanged';
    patch: Patch;
}
export interface GoalCompleted extends BaseEvent {
    type: 'goalCompleted';
    goalId: string;
    value?: number;
    currency?: string;
}
export interface InterestShown extends BaseEvent {
    type: 'interestShown';
    interests: string[];
}
export interface PostDetails {
    postId: string;
    url?: string;
    title: string;
    tags?: string[];
    categories?: string[];
    authors?: string[];
    publishTime: number;
    updateTime?: number;
}
export interface PostViewed extends BaseEvent {
    type: 'postViewed';
    post: PostDetails;
}
export interface EventOccurred extends BaseEvent {
    type: 'eventOccurred';
    name: string;
    testId?: string;
    groupId?: string;
    personalizationId?: string;
    audience?: string;
    details?: {
        [key: string]: string | number | boolean | null;
    };
}
export interface LinkOpened extends BaseEvent {
    type: 'linkOpened';
    link: string;
}
export declare type MiscEvent = NothingChanged | SessionAttributesChanged | EventOccurred | GoalCompleted | InterestShown | PostViewed | LinkOpened;
declare type EventMap = {
    tabVisibilityChanged: TabVisibilityChanged;
    tabUrlChanged: TabUrlChanged;
    tabOpened: TabOpened;
    pageLoaded: PageLoaded;
    pageOpened: PageOpened;
    userSignedIn: UserSignedIn;
    userSignedOut: UserSignedOut;
    userSignedUp: UserSignedUp;
    userProfileChanged: UserProfileChanged;
    productViewed: ProductViewed;
    cartViewed: CartViewed;
    cartModified: CartModified;
    checkoutStarted: CheckoutStarted;
    orderPlaced: OrderPlaced;
    nothingChanged: NothingChanged;
    sessionAttributesChanged: SessionAttributesChanged;
    goalCompleted: GoalCompleted;
    interestShown: InterestShown;
    postViewed: PostViewed;
    eventOccurred: EventOccurred;
    linkOpened: LinkOpened;
};
export declare type TrackingEventType = keyof EventMap;
export declare type TrackingEvent<T extends TrackingEventType = TrackingEventType> = T extends TrackingEventType ? EventMap[T] : EventMap[TrackingEventType];
/**
 * Partial Events
 */
declare type CartPartialEvent<T extends CartEvent = CartEvent> = DistributiveOmit<T, 'cart'> & Record<'cart', Optional<Cart, 'lastUpdateTime'>>;
export declare type PartialTrackingEvent = Exclude<TrackingEvent, PageEvent | TabEvent | CartEvent> | CartPartialEvent;
/**
 * External Events
 */
declare type ExternalEventMap = {
    cartModified: CartPartialEvent<CartModified>;
    cartViewed: CartPartialEvent<CartViewed>;
    checkoutStarted: CartPartialEvent<CheckoutStarted>;
    orderPlaced: OrderPlaced;
    productViewed: ProductViewed;
    userSignedUp: UserSignedUp;
    goalCompleted: GoalCompleted;
    interestShown: InterestShown;
    postViewed: PostViewed;
    linkOpened: LinkOpened;
    eventOccurred: EventOccurred;
};
export declare type ExternalTrackingEventType = keyof ExternalEventMap;
export declare type ExternalTrackingEvent<T extends ExternalTrackingEventType = ExternalTrackingEventType> = T extends ExternalTrackingEventType ? ExternalEventMap[T] : ExternalEventMap[ExternalTrackingEventType];
export declare type ExternalTrackingEventPayload<T extends ExternalTrackingEventType> = Omit<ExternalEventMap[T], 'type'>;
export declare function isIdentifiedUserEvent(event: TrackingEvent): event is IdentifiedUserEvent;
export declare function isCartPartialEvent(event: PartialTrackingEvent): event is CartPartialEvent;
export declare type TrackingEventContext = {
    tabId: string;
    url: string;
    metadata?: {
        [key: string]: string;
    };
};
export declare type BeaconPayload = Exclude<TrackingEvent, IdentifiedUserEvent> | DistributiveOmit<Exclude<IdentifiedUserEvent, UserSignedUp>, 'userId'> & Record<'externalUserId', IdentifiedUserEvent['userId']> | Omit<UserSignedUp, 'userId' | 'profile'> & Record<'externalUserId', IdentifiedUserEvent['userId']> & {
    patch?: Patch;
};
export declare type Beacon = {
    timestamp: number;
    token?: string;
    context: TrackingEventContext;
    payload: BeaconPayload;
};
export {};

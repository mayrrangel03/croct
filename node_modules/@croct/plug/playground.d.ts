import { CidAssigner } from '@croct/sdk/cid';
import { ContextFactory } from '@croct/sdk/facade/evaluatorFacade';
import { Campaign, Page } from '@croct/sdk/evaluator';
import { Plugin, PluginFactory } from './plugin';
import { Logger, SdkEventSubscriber, Tab } from './sdk';
import { TokenProvider } from './sdk/token';
export declare type Options = {
    connectionId?: string;
};
export declare const factory: PluginFactory<Options>;
export declare type Configuration = {
    appId: string;
    connectionId?: string;
    sdkVersion: string;
    tab: Tab;
    contextFactory: ContextFactory;
    storage: Storage;
    eventSubscriber: SdkEventSubscriber;
    cidAssigner: CidAssigner;
    tokenProvider: TokenProvider;
    logger: Logger;
};
export declare type SyncPayload = {
    appId: string;
    connectionId: string;
    sdkVersion: string;
    cid: string;
    tabId: string;
    token: string | null;
    context: {
        campaign?: Campaign;
        page?: Page;
        timezone?: string;
    };
};
export declare class PlaygroundPlugin implements Plugin {
    private readonly sdkVersion;
    private readonly appId;
    private readonly connectionId?;
    private readonly tab;
    private readonly contextFactory;
    private readonly storage;
    private readonly eventSubscriber;
    private readonly cidAssigner;
    private readonly tokenProvider;
    private readonly logger;
    private syncListener?;
    constructor(configuration: Configuration);
    enable(): Promise<void> | void;
    private resolveConnectionId;
    disable(): Promise<void> | void;
    private syncToken;
    private createContext;
}

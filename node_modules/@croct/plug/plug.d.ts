import { SessionFacade } from '@croct/sdk/facade/sessionFacade';
import { UserFacade } from '@croct/sdk/facade/userFacade';
import { TrackerFacade } from '@croct/sdk/facade/trackerFacade';
import { EvaluatorFacade, EvaluationOptions } from '@croct/sdk/facade/evaluatorFacade';
import { Configuration as SdkFacadeConfiguration } from '@croct/sdk/facade/sdkFacade';
import { Optional } from '@croct/sdk/utilityTypes';
import { ExternalTrackingEvent as ExternalEvent, ExternalTrackingEventPayload as ExternalEventPayload, ExternalTrackingEventType as ExternalEventType } from '@croct/sdk/trackingEvents';
import { PluginFactory } from './plugin';
import { EapFeatures } from './eap';
import { SlotId, FetchResponse, FetchOptions } from './fetch';
import { NullableJsonObject, JsonValue } from './sdk/json';
export interface PluginConfigurations {
    [key: string]: any;
}
export declare type Configuration = Optional<SdkFacadeConfiguration, 'appId'> & {
    plugins?: PluginConfigurations;
};
export interface Plug extends EapFeatures {
    readonly tracker: TrackerFacade;
    readonly user: UserFacade;
    readonly session: SessionFacade;
    readonly initialized: boolean;
    readonly flushed: Promise<this>;
    readonly plugged: Promise<this>;
    plug(configuration: Configuration): void;
    isAnonymous(): boolean;
    getUserId(): string | null;
    identify(userId: string): void;
    anonymize(): void;
    setToken(token: string): void;
    unsetToken(): void;
    track<T extends ExternalEventType>(type: T, payload: ExternalEventPayload<T>): Promise<ExternalEvent<T>>;
    evaluate<T extends JsonValue>(expression: string, options?: EvaluationOptions): Promise<T>;
    unplug(): Promise<void>;
}
export declare class GlobalPlug implements Plug {
    private pluginFactories;
    private instance?;
    private plugins;
    private initialize;
    private ready;
    constructor();
    extend(name: string, plugin: PluginFactory): void;
    plug(configuration?: Configuration): void;
    get initialized(): boolean;
    get plugged(): Promise<this>;
    get flushed(): Promise<this>;
    private get sdk();
    get tracker(): TrackerFacade;
    get evaluator(): EvaluatorFacade;
    get user(): UserFacade;
    get session(): SessionFacade;
    isAnonymous(): boolean;
    getUserId(): string | null;
    identify(userId: string): void;
    anonymize(): void;
    setToken(token: string): void;
    unsetToken(): void;
    track<T extends ExternalEventType>(type: T, payload: ExternalEventPayload<T>): Promise<ExternalEvent<T>>;
    evaluate<T extends JsonValue>(expression: string, options?: EvaluationOptions): Promise<T>;
    test(expression: string, options?: EvaluationOptions): Promise<boolean>;
    /**
     * This API is unstable and subject to change in future releases.
     */
    fetch<P extends NullableJsonObject, I extends SlotId = SlotId>(slotId: I, options?: FetchOptions): Promise<FetchResponse<I, P>>;
    unplug(): Promise<void>;
    private eap;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaygroundPlugin = exports.factory = void 0;
var error_1 = require("@croct/sdk/error");
var evaluatorFacade_1 = require("@croct/sdk/facade/evaluatorFacade");
var constants_1 = require("./constants");
var factory = function (_a) {
    var sdk = _a.sdk, options = _a.options;
    return new PlaygroundPlugin({
        sdkVersion: sdk.version,
        appId: sdk.appId,
        connectionId: options.connectionId,
        tab: sdk.tab,
        storage: sdk.getTabStorage(),
        tokenProvider: sdk.tokenStore,
        cidAssigner: sdk.cidAssigner,
        contextFactory: new evaluatorFacade_1.TabContextFactory(sdk.tab),
        eventSubscriber: sdk.eventManager,
        logger: sdk.getLogger(),
    });
};
exports.factory = factory;
var CONNECTION_PARAMETER = '__cplay';
var PlaygroundPlugin = /** @class */ (function () {
    function PlaygroundPlugin(configuration) {
        this.sdkVersion = configuration.sdkVersion;
        this.appId = configuration.appId;
        this.connectionId = configuration.connectionId;
        this.tab = configuration.tab;
        this.contextFactory = configuration.contextFactory;
        this.storage = configuration.storage;
        this.eventSubscriber = configuration.eventSubscriber;
        this.cidAssigner = configuration.cidAssigner;
        this.tokenProvider = configuration.tokenProvider;
        this.logger = configuration.logger;
    }
    PlaygroundPlugin.prototype.enable = function () {
        var _this = this;
        var connectionId = this.resolveConnectionId();
        if (connectionId === null) {
            return;
        }
        this.syncListener = function () {
            return _this.cidAssigner.assignCid()
                .then(function (cid) {
                _this.syncToken(connectionId, cid);
            })
                .catch(function (error) {
                _this.logger.warn("Sync failed: " + error_1.formatCause(error));
            });
        };
        this.eventSubscriber.addListener('tokenChanged', this.syncListener);
        this.tab.addListener('urlChange', this.syncListener);
        return this.syncListener();
    };
    PlaygroundPlugin.prototype.resolveConnectionId = function () {
        if (this.connectionId !== undefined) {
            this.logger.debug('Connection ID passed in configuration');
            return this.connectionId;
        }
        var url = new URL(this.tab.url);
        var connectionId = url.searchParams.get(CONNECTION_PARAMETER);
        if (connectionId === null || connectionId === '') {
            this.logger.debug('No connection ID found in URL');
            connectionId = this.storage.getItem('connectionId');
            this.logger.debug(connectionId !== null
                ? 'Previous connection ID found'
                : 'No previous connection ID found');
            return connectionId;
        }
        this.logger.debug('Connection ID found in URL');
        this.storage.setItem('connectionId', connectionId);
        return connectionId;
    };
    PlaygroundPlugin.prototype.disable = function () {
        if (this.syncListener !== undefined) {
            this.eventSubscriber.removeListener('tokenChanged', this.syncListener);
            this.tab.removeListener('urlChange', this.syncListener);
            delete this.syncListener;
        }
    };
    PlaygroundPlugin.prototype.syncToken = function (connectionId, cid) {
        var _this = this;
        var iframe = document.createElement('iframe');
        iframe.setAttribute('src', constants_1.PLAYGROUND_CONNECT_URL);
        iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');
        iframe.style.visibility = 'hidden';
        iframe.style.opacity = '0';
        iframe.style.border = '0';
        iframe.style.width = '0';
        iframe.style.height = '0';
        var context = this.createContext();
        iframe.onload = function () {
            var _a, _b;
            if (iframe.contentWindow === null) {
                if (document.body.contains(iframe)) {
                    document.body.removeChild(iframe);
                }
                _this.logger.warn('Sync handshake failed');
                return;
            }
            var listener = function (event) {
                if (event.origin !== constants_1.PLAYGROUND_ORIGIN || event.data !== connectionId) {
                    return;
                }
                window.removeEventListener('message', listener);
                if (document.body.contains(iframe)) {
                    document.body.removeChild(iframe);
                }
                _this.logger.debug('Sync completed');
            };
            window.addEventListener('message', listener);
            var payload = {
                appId: _this.appId,
                connectionId: connectionId,
                sdkVersion: _this.sdkVersion,
                tabId: _this.tab.id,
                cid: cid,
                token: (_b = (_a = _this.tokenProvider.getToken()) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : null,
                context: context,
            };
            iframe.contentWindow.postMessage(payload, constants_1.PLAYGROUND_ORIGIN);
            _this.logger.debug('Waiting for sync acknowledgment...');
        };
        this.logger.debug('Sync started');
        var connect = function () {
            document.body.appendChild(iframe);
        };
        if (document.body === null) {
            document.addEventListener('DOMContentLoaded', connect);
        }
        else {
            connect();
        }
    };
    PlaygroundPlugin.prototype.createContext = function () {
        var _a = this.contextFactory.createContext(), page = _a.page, campaign = _a.campaign, timezone = _a.timezone;
        var context = {};
        if (page !== undefined) {
            context.page = page;
        }
        if (campaign !== undefined) {
            context.campaign = campaign;
        }
        if (timezone !== undefined) {
            context.timezone = timezone;
        }
        return context;
    };
    return PlaygroundPlugin;
}());
exports.PlaygroundPlugin = PlaygroundPlugin;

{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LocalStorageCache = void 0;\n\nvar LocalStorageCache =\n/** @class */\nfunction () {\n  function LocalStorageCache(storage, key) {\n    this.listeners = [];\n    this.storage = storage;\n    this.key = key;\n    this.value = storage.getItem(key);\n  }\n\n  LocalStorageCache.autoSync = function (cache) {\n    var listener = cache.sync.bind(cache);\n    window.addEventListener('storage', listener);\n    return function () {\n      return window.removeEventListener('storage', listener);\n    };\n  };\n\n  LocalStorageCache.prototype.get = function () {\n    return this.value;\n  };\n\n  LocalStorageCache.prototype.put = function (value) {\n    this.storage.setItem(this.key, value);\n\n    if (this.value !== value) {\n      this.value = value;\n      this.notifyChange(value);\n    }\n  };\n\n  LocalStorageCache.prototype.clear = function () {\n    this.storage.removeItem(this.key);\n\n    if (this.value !== null) {\n      this.value = null;\n      this.notifyChange(null);\n    }\n  };\n\n  LocalStorageCache.prototype.addListener = function (listener) {\n    if (!this.listeners.includes(listener)) {\n      this.listeners.push(listener);\n    }\n  };\n\n  LocalStorageCache.prototype.removeListener = function (listener) {\n    var index = this.listeners.indexOf(listener);\n\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  };\n\n  LocalStorageCache.prototype.notifyChange = function (value) {\n    this.listeners.forEach(function (listener) {\n      return listener(value);\n    });\n  };\n\n  LocalStorageCache.prototype.sync = function (event) {\n    if (event.storageArea !== this.storage || event.key !== null && event.key !== this.key) {\n      // Ignore unrelated changes\n      return;\n    }\n    /*\n     * Retrieving the value from the store rather than the event ensures\n     * the cache will be in sync with the latest value set.\n     * In case of cascading changes, it prevents notifying listeners\n     * about intermediate states already outdated at this point.\n     */\n\n\n    var value = this.storage.getItem(this.key);\n\n    if (this.value !== value) {\n      this.value = value;\n      this.notifyChange(value);\n    }\n  };\n\n  return LocalStorageCache;\n}();\n\nexports.LocalStorageCache = LocalStorageCache;","map":{"version":3,"names":["Object","defineProperty","exports","value","LocalStorageCache","storage","key","listeners","getItem","autoSync","cache","listener","sync","bind","window","addEventListener","removeEventListener","prototype","get","put","setItem","notifyChange","clear","removeItem","addListener","includes","push","removeListener","index","indexOf","splice","forEach","event","storageArea"],"sources":["C:/Users/User/croct/node_modules/@croct/sdk/cache/localStorageCache.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LocalStorageCache = void 0;\nvar LocalStorageCache = /** @class */ (function () {\n    function LocalStorageCache(storage, key) {\n        this.listeners = [];\n        this.storage = storage;\n        this.key = key;\n        this.value = storage.getItem(key);\n    }\n    LocalStorageCache.autoSync = function (cache) {\n        var listener = cache.sync.bind(cache);\n        window.addEventListener('storage', listener);\n        return function () { return window.removeEventListener('storage', listener); };\n    };\n    LocalStorageCache.prototype.get = function () {\n        return this.value;\n    };\n    LocalStorageCache.prototype.put = function (value) {\n        this.storage.setItem(this.key, value);\n        if (this.value !== value) {\n            this.value = value;\n            this.notifyChange(value);\n        }\n    };\n    LocalStorageCache.prototype.clear = function () {\n        this.storage.removeItem(this.key);\n        if (this.value !== null) {\n            this.value = null;\n            this.notifyChange(null);\n        }\n    };\n    LocalStorageCache.prototype.addListener = function (listener) {\n        if (!this.listeners.includes(listener)) {\n            this.listeners.push(listener);\n        }\n    };\n    LocalStorageCache.prototype.removeListener = function (listener) {\n        var index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            this.listeners.splice(index, 1);\n        }\n    };\n    LocalStorageCache.prototype.notifyChange = function (value) {\n        this.listeners.forEach(function (listener) { return listener(value); });\n    };\n    LocalStorageCache.prototype.sync = function (event) {\n        if (event.storageArea !== this.storage || (event.key !== null && event.key !== this.key)) {\n            // Ignore unrelated changes\n            return;\n        }\n        /*\n         * Retrieving the value from the store rather than the event ensures\n         * the cache will be in sync with the latest value set.\n         * In case of cascading changes, it prevents notifying listeners\n         * about intermediate states already outdated at this point.\n         */\n        var value = this.storage.getItem(this.key);\n        if (this.value !== value) {\n            this.value = value;\n            this.notifyChange(value);\n        }\n    };\n    return LocalStorageCache;\n}());\nexports.LocalStorageCache = LocalStorageCache;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
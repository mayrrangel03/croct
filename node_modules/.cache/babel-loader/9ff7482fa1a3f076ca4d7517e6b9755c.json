{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BackoffPolicy = void 0;\n\nvar BackoffPolicy =\n/** @class */\nfunction () {\n  function BackoffPolicy(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.minRetryDelay = 1000;\n    this.maxRetryDelay = 30000;\n    this.backoffFactor = 2;\n    this.backoffJitter = 1;\n    this.maxAttempts = Infinity;\n    var _a = options.minRetryDelay,\n        minRetryDelay = _a === void 0 ? this.minRetryDelay : _a,\n        _b = options.maxRetryDelay,\n        maxRetryDelay = _b === void 0 ? this.maxRetryDelay : _b,\n        _c = options.backoffFactor,\n        backoffFactor = _c === void 0 ? this.backoffFactor : _c,\n        _d = options.backoffJitter,\n        backoffJitter = _d === void 0 ? this.backoffJitter : _d,\n        _e = options.maxAttempts,\n        maxAttempts = _e === void 0 ? this.maxAttempts : _e;\n\n    if (minRetryDelay < 0) {\n      throw new Error('The minimum retry delay must be non-negative.');\n    }\n\n    if (maxRetryDelay < minRetryDelay) {\n      throw new Error('The maximum retry delay must be greater than the minimum.');\n    }\n\n    if (backoffFactor < 1) {\n      throw new Error('The backoff factor must be greater than zero.');\n    }\n\n    if (backoffJitter < 0) {\n      throw new Error('The backoff jitter must be non-negative.');\n    }\n\n    if (maxAttempts < 0) {\n      throw new Error('The maximum attempts must be non-negative.');\n    }\n\n    this.minRetryDelay = minRetryDelay;\n    this.maxRetryDelay = maxRetryDelay;\n    this.backoffFactor = backoffFactor;\n    this.backoffJitter = backoffJitter;\n    this.maxAttempts = maxAttempts;\n  }\n  /**\n   * Full Jitter algorithm\n   *\n   * @see https://www.awsarchitectureblog.com/2015/03/backoff.html\n   */\n\n\n  BackoffPolicy.prototype.getDelay = function (attempt) {\n    var delay = Math.min(Math.max(Math.pow(this.backoffFactor, attempt), this.minRetryDelay), this.maxRetryDelay);\n\n    if (this.backoffJitter > 0) {\n      // Jitter will result in a random value between the minimum and\n      // calculated delay for a given attempt.\n      var min = Math.ceil(this.minRetryDelay);\n      var max = Math.floor(delay);\n      delay = Math.floor(Math.random() * (max - min + 1)) + min;\n    } // Removing any fractional digits\n\n\n    delay -= delay % 1;\n    return delay;\n  };\n\n  BackoffPolicy.prototype.shouldRetry = function (attempt) {\n    return attempt < this.maxAttempts;\n  };\n\n  return BackoffPolicy;\n}();\n\nexports.BackoffPolicy = BackoffPolicy;","map":{"version":3,"names":["Object","defineProperty","exports","value","BackoffPolicy","options","minRetryDelay","maxRetryDelay","backoffFactor","backoffJitter","maxAttempts","Infinity","_a","_b","_c","_d","_e","Error","prototype","getDelay","attempt","delay","Math","min","max","pow","ceil","floor","random","shouldRetry"],"sources":["C:/Users/User/croct/node_modules/@croct/sdk/retry/backoffPolicy.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BackoffPolicy = void 0;\nvar BackoffPolicy = /** @class */ (function () {\n    function BackoffPolicy(options) {\n        if (options === void 0) { options = {}; }\n        this.minRetryDelay = 1000;\n        this.maxRetryDelay = 30000;\n        this.backoffFactor = 2;\n        this.backoffJitter = 1;\n        this.maxAttempts = Infinity;\n        var _a = options.minRetryDelay, minRetryDelay = _a === void 0 ? this.minRetryDelay : _a, _b = options.maxRetryDelay, maxRetryDelay = _b === void 0 ? this.maxRetryDelay : _b, _c = options.backoffFactor, backoffFactor = _c === void 0 ? this.backoffFactor : _c, _d = options.backoffJitter, backoffJitter = _d === void 0 ? this.backoffJitter : _d, _e = options.maxAttempts, maxAttempts = _e === void 0 ? this.maxAttempts : _e;\n        if (minRetryDelay < 0) {\n            throw new Error('The minimum retry delay must be non-negative.');\n        }\n        if (maxRetryDelay < minRetryDelay) {\n            throw new Error('The maximum retry delay must be greater than the minimum.');\n        }\n        if (backoffFactor < 1) {\n            throw new Error('The backoff factor must be greater than zero.');\n        }\n        if (backoffJitter < 0) {\n            throw new Error('The backoff jitter must be non-negative.');\n        }\n        if (maxAttempts < 0) {\n            throw new Error('The maximum attempts must be non-negative.');\n        }\n        this.minRetryDelay = minRetryDelay;\n        this.maxRetryDelay = maxRetryDelay;\n        this.backoffFactor = backoffFactor;\n        this.backoffJitter = backoffJitter;\n        this.maxAttempts = maxAttempts;\n    }\n    /**\n     * Full Jitter algorithm\n     *\n     * @see https://www.awsarchitectureblog.com/2015/03/backoff.html\n     */\n    BackoffPolicy.prototype.getDelay = function (attempt) {\n        var delay = Math.min(Math.max(Math.pow(this.backoffFactor, attempt), this.minRetryDelay), this.maxRetryDelay);\n        if (this.backoffJitter > 0) {\n            // Jitter will result in a random value between the minimum and\n            // calculated delay for a given attempt.\n            var min = Math.ceil(this.minRetryDelay);\n            var max = Math.floor(delay);\n            delay = Math.floor(Math.random() * (max - min + 1)) + min;\n        }\n        // Removing any fractional digits\n        delay -= delay % 1;\n        return delay;\n    };\n    BackoffPolicy.prototype.shouldRetry = function (attempt) {\n        return attempt < this.maxAttempts;\n    };\n    return BackoffPolicy;\n}());\nexports.BackoffPolicy = BackoffPolicy;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,IAAIA,aAAa;AAAG;AAAe,YAAY;EAC3C,SAASA,aAAT,CAAuBC,OAAvB,EAAgC;IAC5B,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;MAAEA,OAAO,GAAG,EAAV;IAAe;;IACzC,KAAKC,aAAL,GAAqB,IAArB;IACA,KAAKC,aAAL,GAAqB,KAArB;IACA,KAAKC,aAAL,GAAqB,CAArB;IACA,KAAKC,aAAL,GAAqB,CAArB;IACA,KAAKC,WAAL,GAAmBC,QAAnB;IACA,IAAIC,EAAE,GAAGP,OAAO,CAACC,aAAjB;IAAA,IAAgCA,aAAa,GAAGM,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAKN,aAArB,GAAqCM,EAArF;IAAA,IAAyFC,EAAE,GAAGR,OAAO,CAACE,aAAtG;IAAA,IAAqHA,aAAa,GAAGM,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAKN,aAArB,GAAqCM,EAA1K;IAAA,IAA8KC,EAAE,GAAGT,OAAO,CAACG,aAA3L;IAAA,IAA0MA,aAAa,GAAGM,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAKN,aAArB,GAAqCM,EAA/P;IAAA,IAAmQC,EAAE,GAAGV,OAAO,CAACI,aAAhR;IAAA,IAA+RA,aAAa,GAAGM,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAKN,aAArB,GAAqCM,EAApV;IAAA,IAAwVC,EAAE,GAAGX,OAAO,CAACK,WAArW;IAAA,IAAkXA,WAAW,GAAGM,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAKN,WAArB,GAAmCM,EAAna;;IACA,IAAIV,aAAa,GAAG,CAApB,EAAuB;MACnB,MAAM,IAAIW,KAAJ,CAAU,+CAAV,CAAN;IACH;;IACD,IAAIV,aAAa,GAAGD,aAApB,EAAmC;MAC/B,MAAM,IAAIW,KAAJ,CAAU,2DAAV,CAAN;IACH;;IACD,IAAIT,aAAa,GAAG,CAApB,EAAuB;MACnB,MAAM,IAAIS,KAAJ,CAAU,+CAAV,CAAN;IACH;;IACD,IAAIR,aAAa,GAAG,CAApB,EAAuB;MACnB,MAAM,IAAIQ,KAAJ,CAAU,0CAAV,CAAN;IACH;;IACD,IAAIP,WAAW,GAAG,CAAlB,EAAqB;MACjB,MAAM,IAAIO,KAAJ,CAAU,4CAAV,CAAN;IACH;;IACD,KAAKX,aAAL,GAAqBA,aAArB;IACA,KAAKC,aAAL,GAAqBA,aAArB;IACA,KAAKC,aAAL,GAAqBA,aAArB;IACA,KAAKC,aAAL,GAAqBA,aAArB;IACA,KAAKC,WAAL,GAAmBA,WAAnB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIN,aAAa,CAACc,SAAd,CAAwBC,QAAxB,GAAmC,UAAUC,OAAV,EAAmB;IAClD,IAAIC,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASF,IAAI,CAACG,GAAL,CAAS,KAAKjB,aAAd,EAA6BY,OAA7B,CAAT,EAAgD,KAAKd,aAArD,CAAT,EAA8E,KAAKC,aAAnF,CAAZ;;IACA,IAAI,KAAKE,aAAL,GAAqB,CAAzB,EAA4B;MACxB;MACA;MACA,IAAIc,GAAG,GAAGD,IAAI,CAACI,IAAL,CAAU,KAAKpB,aAAf,CAAV;MACA,IAAIkB,GAAG,GAAGF,IAAI,CAACK,KAAL,CAAWN,KAAX,CAAV;MACAA,KAAK,GAAGC,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,MAAiBJ,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAAtD;IACH,CARiD,CASlD;;;IACAF,KAAK,IAAIA,KAAK,GAAG,CAAjB;IACA,OAAOA,KAAP;EACH,CAZD;;EAaAjB,aAAa,CAACc,SAAd,CAAwBW,WAAxB,GAAsC,UAAUT,OAAV,EAAmB;IACrD,OAAOA,OAAO,GAAG,KAAKV,WAAtB;EACH,CAFD;;EAGA,OAAON,aAAP;AACH,CApDkC,EAAnC;;AAqDAF,OAAO,CAACE,aAAR,GAAwBA,aAAxB"},"metadata":{},"sourceType":"script"}